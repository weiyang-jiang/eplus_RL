<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="WebSocketClient" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[50.0, 65.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A simple demo for WebSocketClient accessor. The WebSocketClient can be imported from &#10;http://www.terraswarm.org/accessors/.&#10;&#10;NOTE: This client assumes that there is a web socket server running on the local host.&#10;There are two alternative implementations of the server.  A Ptolemy II server is provided&#10;as a model called WebSocketServer in this same directory by clicking on the link below:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 195.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 565.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={1282, 278, 958, 698}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[724, 588]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0235813924837462">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{332.77539062499994, 319.52362351190476}">
    </property>
    <property name="Sender" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="WebSocketServer Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 325.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/WebSocketClient/WebSocketServer.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Alternatively, there is also a Node.js server, which you can start with:&#10;     &gt; node NodeServer.js&#10;before running this demo. NodeServer.js is in the same demo directory.  You may need&#10;to install the 'ws' module using something like:&#10;     &gt; sudo npm install ws&#10;&#10;You may also need to install node-gyp:&#10;     &gt; sudo npm install node-gyp&#10;&#10;The reply messages from the server appear in the display MessageFromServer, while the&#10;current status of the connection appears in the console.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-20.0, 375.0}">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 140.0]">
        </property>
    </entity>
    <entity name="MessageFromServer" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={905, 514, 535, 386}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[535, 342]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[585.0, 150.0]">
        </property>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 150.0]">
        </property>
    </entity>
    <entity name="RecordAssembler" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[260.0, 130.0]">
        </property>
        <port name="messageID" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="WebSocketClient" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor sends and/or receives messages from a web socket at&#10; *  the specified host and port. &#10; *  &lt;a href=&quot;https://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSockets&lt;/a&gt; &#10; *  provide full-duplex communication channels over a single TCP/IP connection.&#10; *  In `initialize()`, it  begins connecting to the web socket server.&#10; *  Once the connection is established, a `true` boolean is sent to&#10; *  the `connected` output.&#10; *  If connection is not established immediately, the accessor will attempt to&#10; *  reconnect _numberOfRetries_ times at an interval of _reconnectInterval_.&#10; *&#10; *  Whenever an input is received on the `toSend`&#10; *  input, the message is sent to the socket. If the socket is not yet open,&#10; *  this accessor will, by default, queue the message to send when the socket opens,&#10; *  unless the `discardMessagesBeforeOpen` parameter is true, in which case,&#10; *  input messages that are received before the socket is opened will be&#10; *  discarded. If messages are queued and `throttleFactor` is non-zero, then&#10; *  whenever a message is queued to be later sent, the accessor's input handler will stall&#10; *  by a number of milliseconds given by the queue size times the throttleFactor.&#10; *  The longer the queue, the longer the stall. Note that this will likely block&#10; *  the host from executing, so this feature should be used with caution.&#10; *&#10; *  Whenever a message is received from the socket, that message is&#10; *  produced on the `'received'` output. Note that the message may actually be sent&#10; *  over multiple 'frames', but the frames will be aggregated and produced as one&#10; *  message.&#10; *&#10; *  When `wrapup()` is invoked, this accessor closes the&#10; *  connection.&#10; *&#10; *  If the connection is dropped midway, the swarmlet may monitor the 'connected'&#10; *  output for a value 'false' and attempt a reconnection by providing either a&#10; *  port or server input.&#10; *&#10; *  The default type for both sending and receiving&#10; *  is 'application/json', which allows sending and receiving anything that has&#10; *  a string representation in JSON. The types supported by this implementation&#10; *  include at least:&#10; *  * __application/json__: The this.send() function uses JSON.stringify() and sends the&#10; *    result with a UTF-8 encoding. An incoming byte stream will be parsed as JSON,&#10; *    and if the parsing fails, will be provided as a string interpretation of the byte&#10; *    stream.&#10; *  * __text/\*__: Any text type is sent as a string encoded in UTF-8.&#10; *  * __image/x__: Where __x__ is one of __json__, __png__, __gif__,&#10; *    and more.&#10; *    In this case, the data passed to this.send() is assumed to be an image, as encoded&#10; *    on the host, and the image will be encoded as a byte stream in the specified&#10; *    format before sending.  A received byte stream will be decoded as an image,&#10; *    if possible.&#10; *&#10; *  When a model with an instance of this accessor stops executing, there&#10; *  are two mechanisms by which data in transit can be lost. In both cases, warning&#10; *  messages or error messages will be issued to the host to be displayed or otherwise&#10; *  handled as the host sees fit.&#10; *&#10; *  * First, there might be queued messages that were received on `toSend` but have not yet&#10; *    been sent, either because the socket has not yet been opened or because&#10; *    it was closed from the other side.&#10; *  * Second, a message might be received from the server after shutdown has commenced.&#10; *    In particular, received messages are handled asynchronously by a handler function&#10; *    that can be invoked at any time, and that handler might be invoked after it is no&#10; *    longer possible for this accessor to produce outputs (it has entered its wrapup&#10; *    phase of execution).&#10; *&#10; *  The server might similarly lose messages by the same two mechanisms occurring&#10; *  on the server side. In that case, messages will presumably be displayed on the&#10; *  server side.&#10; *&#10; *  Accessors that extend this one can override the `toSendInputHandler` function&#10; *  to customize what is sent. See `RosPublisher.js` for an example.&#10; *&#10; *  This accessor requires the 'webSocket' module.&#10; *&#10; *  @accessor net/WebSocketClient&#10; *  @input {string} server The IP address or domain name of server. Defaults to 'localhost'.&#10; *  @input {int} port The port on the server to connect to. Defaults to -1, which means&#10; *   wait for a non-negative input before connecting.&#10; *  @input toSend The data to be sent over the socket.&#10; *  @output {boolean} connected Output `true` on connected and `false` on disconnected.&#10; *  @output received The data received from the web socket server.&#10; *  &#10; *  @parameter {string} receiveType The MIME type for incoming messages,&#10; *   which defaults to 'application/json'.&#10; *  @parameter {string} sendType The MIME type for outgoing messages,&#10; *   which defaults to 'application/json'.&#10; *  @parameter {int} connectTimeout The time in milliseconds to wait&#10; *   before giving up on a connection (default is 1000).&#10; *  @parameter {int} numberOfRetries The number of times to retry if&#10; *   a connection fails. Defaults to 5.&#10; *  @parameter {int} timeBetweenRetries The time between retries in milliseconds.&#10; *   Defaults to 500.&#10; *  @parameter {boolean} discardMessagesBeforeOpen If true,&#10; *   then any messages received on `toSend` before the socket&#10; *   is open will be discarded. This defaults to false.&#10; *  @parameter {int} throttleFactor If non-zero, specifies a&#10; *   time (in milliseconds) to stall when a message is queued&#10; *   because the socket is not yet open. The time of the stall&#10; *   will be the queue size (after adding the message) times&#10; *   the throttleFactor. This defaults to 100. Making it non-zero&#10; *   causes the input handler to take time if there are pending unsent messages.&#10;&#10; *  @author Hokeun Kim, Marcus Pan, Edward A. Lee, Matt Weber&#10; *  @version $$Id: WebSocketClient.xml 74569 2016-02-26 01:24:47Z hokeunkim $$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var WebSocket = require('webSocketClient');&#10;var client = null;&#10;var pendingSends = [];&#10;var previousServer, previousPort;&#10;var running = false;&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function () {&#10;    this.input('server', {&#10;        type : 'string',&#10;        value : 'localhost'&#10;    });&#10;    this.input('port', {&#10;        type : 'int',&#10;        value : -1&#10;    });&#10;    this.input('toSend');&#10;    this.output('connected', {&#10;        type : 'boolean'&#10;    });&#10;    this.output('received');&#10;    &#10;    this.parameter('receiveType', {&#10;        type : 'string',&#10;        value : 'application/json',&#10;    });&#10;    this.parameter('sendType', {&#10;        type : 'string',&#10;        value : 'application/json',&#10;    });&#10;    this.parameter('connectTimeout', {&#10;        value: 1000,&#10;        type: &quot;int&quot;&#10;    });&#10;    this.parameter('numberOfRetries', {&#10;        type : 'int',&#10;        value : 5&#10;    });&#10;    this.parameter('timeBetweenRetries', {&#10;        type : 'int',&#10;        value : 500&#10;    });&#10;    this.parameter('trustAll', {&#10;        type : 'boolean',&#10;        value : false&#10;    });&#10;    this.parameter('trustedCACertPath', {&#10;        type : 'string',&#10;        value : ''&#10;    });&#10;    this.parameter('sslTls', {&#10;        type : 'boolean',&#10;        value : false&#10;    });&#10;    this.parameter('discardMessagesBeforeOpen', {&#10;        type : 'boolean',&#10;        value : false&#10;    });&#10;    this.parameter('throttleFactor', {&#10;        type : 'int',&#10;        value : 100&#10;    });&#10;    &#10;    // Attempt to add a list of options for types, but do not error out&#10;    // if the socket module is not supported by the host.&#10;    try {&#10;        this.parameter('receiveType', {&#10;            options : WebSocket.supportedReceiveTypes()&#10;        });&#10;        this.parameter('sendType', {&#10;            options : WebSocket.supportedSendTypes()&#10;        });&#10;    } catch(err) {&#10;        this.error(err);&#10;    }&#10;};&#10;&#10;/** Set up input handlers, and if the current value of the 'port' input is&#10; *  non-negative, initiate a connection to the server using the&#10; *  current parameter values, and&#10; *  set up handlers for for establishment of the connection, incoming data,&#10; *  errors, and closing from the server.&#10; */&#10;exports.initialize = function () {&#10;	this.addInputHandler('server', this.exports.connect.bind(this));&#10;	this.addInputHandler('port', this.exports.connect.bind(this));&#10;    this.addInputHandler('toSend', exports.toSendInputHandler.bind(this));&#10;    running = true;&#10;    this.exports.connect.call(this);&#10;};&#10;&#10;/** Initiate a connection to the server using the current parameter values,&#10; *  set up handlers for for establishment of the connection, incoming data,&#10; *  errors, and closing from the server, and set up a handler for inputs&#10; *  on the toSend() input port.&#10; */&#10;exports.connect = function () {&#10;	// Note that if 'server' and 'port' both receive new data in the same&#10;	// reaction, then this will be invoked twice. But we only want to open&#10;	// the socket once.  This is fairly tricky.&#10;	&#10;	var portValue = this.get('port');&#10;	if (portValue &lt; 0) {&#10;		// No port is specified. This could be a signal to close a previously&#10;		// open socket.&#10;		if (client &amp;&amp; client.isOpen()) {&#10;			client.close();&#10;		}&#10;		previousPort = null;&#10;		previousServer = null;&#10;		return;&#10;	}&#10;	&#10;	var serverValue = this.get('server');&#10;	if (previousServer === serverValue &amp;&amp; previousPort === portValue) {&#10;		// A request to open a client for this server/port pair has already&#10;		// been made and has not yet been closed or failed with an error.&#10;		return;&#10;	}&#10;	// Record the host/port pair that we are now opening.&#10;	previousServer = serverValue;&#10;	previousPort = portValue;&#10;	&#10;	if (client &amp;&amp; client.isOpen()) {&#10;		// Either the host or the port has changed. Close the previous socket.&#10;		client.close();&#10;	}&#10;	&#10;    client = new WebSocket.Client(&#10;        {&#10;            'host' : this.get('server'),&#10;            'port' : this.get('port'),&#10;            'receiveType' : this.getParameter('receiveType'),&#10;            'sendType' : this.getParameter('sendType'),&#10;            'connectTimeout' : this.getParameter('connectTimeout'),&#10;            'numberOfRetries' : this.getParameter('numberOfRetries'),&#10;            'timeBetweenRetries' : this.getParameter('timeBetweenRetries'),&#10;            'trustAll' : this.getParameter('trustAll'),&#10;            'trustedCACertPath' : this.getParameter('trustedCACertPath'),&#10;            'sslTls' : this.getParameter('sslTls'),&#10;            'discardMessagesBeforeOpen' : this.getParameter('discardMessagesBeforeOpen'),&#10;            'throttleFactor' : this.getParameter('throttleFactor')&#10;        }&#10;    );&#10;&#10;    // Using 'this.exports' rather than just 'exports' below allows these&#10;    // functions to be overridden in derived accessors.&#10;    client.on('open', this.exports.onOpen.bind(this));&#10;    client.on('message', this.exports.onMessage.bind(this));&#10;    client.on('close', this.exports.onClose.bind(this));&#10;&#10;    client.on('error', function (message) {&#10;    	previousServer = null;&#10;    	previousPort = null;&#10;        console.log('Error: ' + message);&#10;    });&#10;    &#10;    client.open();&#10;};&#10;&#10;/** Handles input on 'toSend'. */&#10;exports.toSendInputHandler = function () {&#10;    this.exports.sendToWebSocket.call(this, this.get('toSend'));&#10;};&#10;&#10;/** Sends JSON data to the web socket. */&#10;exports.sendToWebSocket = function (data) {&#10;	// May be receiving inputs before client has been set.&#10;	if (client) {&#10;    	client.send(data);&#10;	} else {&#10;        if (!this.getParameter('discardMessagesBeforeOpen')) {&#10;            pendingSends.push(data);&#10;        } else {&#10;            console.log('Discarding data because socket is not open.');&#10;        }&#10;	}&#10;};&#10;&#10;/** Executes once  web socket establishes a connection.&#10; *  Sets 'connected' output to true.&#10; */&#10;exports.onOpen = function () {&#10;    console.log('Status: Connection established');&#10;    this.send('connected', true);&#10;    &#10;    // If there are pending sends, send them now.&#10;    // Note this implementation requires that the host invoke&#10;    // this callback function atomically w.r.t. the input handler&#10;    // that adds messages to the pendingSends queue.&#10;    for (var i = 0; i &lt; pendingSends.length; i++) {&#10;    	client.send(pendingSends[i]);&#10;    }&#10;    pendingSends = [];&#10;};&#10;&#10;/** Send false to 'connected' output.&#10; *  This will be called if either side closes the connection.&#10; */&#10;exports.onClose = function() {&#10;	previousServer = null;&#10;	previousPort = null;&#10;&#10;	console.log('Status: Connection closed.');&#10;	&#10;    // NOTE: Even if running is true, it can occur that it is too late&#10;    // to send the message (the wrapup process has been started), in which case&#10;    // the message may not be received.&#10;    if (running) {&#10;        this.send('connected', false);&#10;    }&#10;}&#10;&#10;/** Send the message received from web socket to the 'received' output. */&#10;exports.onMessage = function (message) {&#10;    this.send('received', message);&#10;};&#10;&#10;/** Return true if the socket is open. */&#10;exports.isOpen = function () {&#10;    return client.isOpen();&#10;};&#10;&#10;/** Close the web socket connection. */&#10;exports.wrapup = function () {&#10;    running = false;&#10;    if (client) {&#10;        client.close();&#10;        console.log('Status: Connection closed in wrapup.');&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/net/WebSocketClient.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.actor.parameters.PortParameter" value="8080">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{430.0, 140.0}">
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation2"/>
    <link port="MessageFromServer.input" relation="relation4"/>
    <link port="Ramp.output" relation="relation3"/>
    <link port="Ramp.trigger" relation="relation2"/>
    <link port="RecordAssembler.output" relation="relation"/>
    <link port="RecordAssembler.messageID" relation="relation3"/>
    <link port="WebSocketClient.toSend" relation="relation"/>
    <link port="WebSocketClient.received" relation="relation4"/>
</entity>
