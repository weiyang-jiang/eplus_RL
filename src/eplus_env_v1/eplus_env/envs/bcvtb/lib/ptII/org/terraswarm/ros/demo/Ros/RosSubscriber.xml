<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="RosSubscriber" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[145.0, 60.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A simple demo for RosSubscriber accesor. This accessor connects to a rosbridge server, &#10;that is running on a ROS sytem, and subscribes to a ROS topic in that system. &#10;&#10;The accessor takes in the following 3 parameters:&#10;1. address (string) of rosbridge, eg: &quot;localhost&quot; or &quot;127.0.0.1&quot;&#10;2. port (number) of rosbridge, eg: 9090&#10;3. topic (string), eg: /noise (don't enclose in quotation marks &quot;&quot; !)&#10;&#10;It displays the JSON message it receives.&#10;&#10;To run the demo, run the following commands on a ROS system. &#10;&#10;&#10;&#10;&#10;&#10;&#10;This publishes &quot;hello world&quot; to the /noise topic. You should see the RosSubscriber &#10;output &quot;hello world&quot;&#10;">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[45.0, 315.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={188, 24, 1029, 869}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[795, 759]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{397.5, 379.5}">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="fontFamily" class="ptolemy.data.expr.StringParameter" value="Monospaced">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="$roscore&#10;$roslaunch rosbridge_server rosbridge_websocket.launch&#10;$rostopic pub noise std_msgs/String &quot;hello world&quot;&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 520.0]">
        </property>
    </property>
    <entity name="MessageOnTopic" class="ptolemy.actor.lib.gui.Display">
        <display name="MessageOnTopic&#10;"/>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={70, 413, 1370, 406}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1370, 357]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 185.0]">
        </property>
    </entity>
    <entity name="RosSubscriber" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the &#10; *  WebSocketClient accessor to do so. &#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;. &#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;. &#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id: RosSubscriber.js 533 2016-01-31 23:17:46Z eal $$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function() {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function() {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */ &#10;exports.initialize = function() {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function() {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function() {&#10;    &#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;;&#10;    var fragmentCount = 0;&#10;    &#10;    var processMessage = function(message){&#10;&#10;        //Check for missing fragment&#10;        if (fragmentCount != message.num){&#10;            console.error(&quot;Fragment &quot;&#10;                + fragmentCount&#10;                + &quot; of message is missing. Instead received fragment number &quot;&#10;                + message.num);&#10;        }&#10;&#10;        //Accumulate data from fragment.&#10;        if (fragmentCount === 0){&#10;            originalMessage = message.data;&#10;            fragmentCount++;&#10;            return null;&#10;        } else if (fragmentCount &lt; message.total - 1 ){&#10;            originalMessage += message.data;&#10;            fragmentCount++;&#10;            return null;&#10;        } else if (fragmentCount == message.total -1 ){&#10;            originalMessage += message.data;&#10;            fragmentCount = 0;&#10;            return originalMessage;&#10;        } else {&#10;            console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;            return null;&#10;        }&#10;    };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function(message){&#10;    &#10;    var messageToSend;&#10;    if (getParameter('outputCompleteResponseOnly') &amp;&amp; message.op == &quot;fragment&quot;){&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null){&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/robotics/RosSubscriber.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/noise">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="throttle_rate" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="queue_length" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="fragment_size" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="compression" class="ptolemy.data.expr.StringParameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[155.0, 175.0]">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="connectTimeout" class="ptolemy.data.expr.Parameter" value="60000">
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the &#10; WebSocketClient accessor to do so. &#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;. &#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: RosSubscriber.js 533 2016-01-31 23:17:46Z eal $$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="throttleRate" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="queueLength" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="fragmentSize" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="MessageOnTopic.input" relation="relation"/>
    <link port="RosSubscriber.received" relation="relation"/>
</entity>
