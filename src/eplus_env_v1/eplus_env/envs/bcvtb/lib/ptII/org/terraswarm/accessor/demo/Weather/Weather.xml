<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Weather" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={3, 23, 1108, 641}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[874, 531]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.2033426183844012">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{219.99999999999994, 208.95708636884336}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-80.0, 25.0]">
        </property>
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.ActorLayoutConfiguration">
        <property name="spacing" class="ptolemy.actor.parameters.DoubleRangeParameter" value="5.359999999999999">
            <display name="Object spacing"/>
        </property>
        <property name="interactionMode" class="ptolemy.data.expr.ChoiceParameter" value="Cycles">
            <display name="Interaction mode"/>
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model opens a shell into which you type a city name or address.&#10;It then invokes a GeoCoder (a Google service) to convert the address into&#10;a location (latitude and longitude). It then invokes a weather service&#10;(http://openweathermap.org) to retrieve the current weather information&#10;for the specified location.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, -5.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="NOTE: You need to obtain &quot;keys&quot; for the Google Geocoding API and&#10;for openweathermap.org. You can  obtain them for free at:&#10; - https://developers.google.com/maps/documentation/geocoding/intro&#10; - http://openweathermap.org/appid&#10;Then enter the keys into the 'key' parameters of the GeoCoder and&#10;Weather accessors.&#10;&#10;Keys for Terraswarm members are available at:&#10;https://www.terraswarm.org/testbeds/wiki/Main/AccessControlAndKeyDistribution&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 90.0]">
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;Enter a city name or address&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-100.0, 155.0]">
        </property>
    </entity>
    <entity name="Weather" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Retrieve weather information for a given location using&#10; *  http://openweathermap.org .&#10; *  The location input is given as an object with two numeric fields,&#10; *  &quot;latitude&quot; and &quot;longitude&quot;. The default is&#10; *  `{&quot;latitude&quot;: 37.85, &quot;longitude&quot;: -122.26}`, which is&#10; *  the location of Berkeley, California.&#10; *&#10; *  This accessor requires a &quot;key&quot; for the API, which you can&#10; *  obtain for free at http://openweathermap.org/appid .&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *location* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  @accessor services/Weather&#10; *  @author Edward A. Lee&#10; *  @version $$Id: Weather.xml 74559 2016-02-24 02:09:11Z eal $$&#10; *  @input location The location, an object with two fields (default is Berkeley).&#10; *  @output response An object containing current weather data.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, addInputParameter, error, exports, extend, input, get, getParameter, output, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    this.extend('net/REST');&#10;    this.input('location', {'value': {&quot;latitude&quot;: 37.85, &quot;longitude&quot;: -122.26}});&#10;    this.output('weather');&#10;    this.parameter('temperature', {&#10;        'type':'string',&#10;        'options':['Fahrenheit', 'Celsius', 'Kelvin'],&#10;        'value':'Fahrenheit'&#10;    });&#10;    this.parameter('key', {'type':'string', 'value':'Enter Key Here'});&#10;&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    this.input('options', {'visibility':'expert', 'value':'&quot;http://api.openweathermap.org&quot;'});&#10;    this.input('command', {'visibility':'expert', 'value':'/data/2.5/weather'});&#10;    this.input('arguments', {'visibility':'expert', 'value':'{&quot;lat&quot;:37.85, &quot;lon&quot;:-122.26}'});&#10;    this.input('body', {'visibility':'expert'});&#10;    this.input('trigger', {'visibility':'expert'});&#10;    this.output('headers', {'visibility':'expert'});&#10;    this.output('status', {'visibility':'expert'});&#10;    this.parameter('outputCompleteResponsesOnly', {'visibility':'expert'});&#10;};&#10;&#10;exports.initialize = function() {&#10;    // Be sure to call the superclass so that the trigger input handler gets registered.&#10;    exports.ssuper.initialize.call(this);&#10;    &#10;    var key = this.getParameter('key');&#10;    if (key == &quot;Enter Key Here&quot;) {&#10;        throw &quot;Weather:  You need a key, which you can obtain at http://openweathermap.org/appid.&quot;;&#10;    }&#10;&#10;    var self = this;&#10;    &#10;    // Handle location information.&#10;    this.addInputHandler('location', function() {&#10;        var location = this.get('location');&#10;        if (location &amp;&amp;&#10;                typeof location.latitude === 'number' &amp;&amp;&#10;                typeof location.longitude === 'number') {&#10;            var reformatted = {&#10;                'lat' : location.latitude,&#10;                'lon' : location.longitude,&#10;                'APPID' : key&#10;            };&#10;            self.send('arguments', reformatted);&#10;            self.send('trigger', true);&#10;        } else {&#10;            if (location ==- null) {&#10;                error('Weather: No location information.');&#10;            } else {&#10;                error('Weather: Malformed location: ' + location +&#10;                      '\nExpecting {&quot;latitude&quot;:number, &quot;longitude&quot;:number}');&#10;            }&#10;            self.send('weather', null);&#10;        }&#10;    });&#10;};&#10;&#10;/** Filter the response, extracting the weather information and&#10; *  outputting it on the weather output. The full response is produced&#10; *  on the 'response' output.&#10; */&#10;exports.filterResponse = function(response) {&#10;    if (response) {&#10;        try {&#10;            // NOTE: All of the following should be replaced with a generic&#10;            // schema transformation utility.&#10;            var parsed = JSON.parse(response);&#10;            var weather = {};&#10;            // Look for a description field.&#10;            if (parsed.weather &amp;&amp;&#10;                    Array.isArray(parsed.weather) &amp;&amp;&#10;                    parsed.weather[0] &amp;&amp;&#10;                    parsed.weather[0].description) {&#10;                weather.description = parsed.weather[0].description;&#10;            }&#10;            if (parsed.main) {&#10;                if (parsed.main.temp) {&#10;                    weather.temperature = convertTemperature(&#10;                            parsed.main.temp,&#10;                            this.getParameter('temperature'));&#10;                }&#10;                if (parsed.main.pressure) {&#10;                    weather['pressure (hPa)'] = parsed.main.pressure;&#10;                }&#10;                if (parsed.main.humidity) {&#10;                    weather['humidity (percent)'] = parsed.main.humidity;&#10;                }&#10;                if (parsed.main.temp_min) {&#10;                    weather['minimum temperature'] = convertTemperature(&#10;                            parsed.main.temp_min,&#10;                            this.getParameter('temperature'));&#10;                }&#10;                if (parsed.main.temp_max) {&#10;                    weather['maximum temperature'] = convertTemperature(&#10;                            parsed.main.temp_max,&#10;                            this.getParameter('temperature'));&#10;                }&#10;                if (parsed.main.wind) {&#10;                    if (parsed.main.wind.speed) {&#10;                        weather['wind speed (meters/second)'] = parsed.main.wind.speed;&#10;                    }&#10;                    if (parsed.main.wind.deg) {&#10;                        var deg = parsed.main.wind.deg;&#10;                        var directions = [&#10;                            &quot;North&quot;,&#10;                            &quot;North Northeast&quot;,&#10;                            &quot;Northeast&quot;,&#10;                            &quot;East Northeast&quot;,&#10;                            &quot;East&quot;,&#10;                            &quot;East Southeast&quot;,&#10;                            &quot;Southeast&quot;,&#10;                            &quot;South Southeast&quot;,&#10;                            &quot;South&quot;,&#10;                            &quot;South Southwest&quot;,&#10;                            &quot;Southwest&quot;,&#10;                            &quot;West Southwest&quot;,&#10;                            &quot;West&quot;,&#10;                            &quot;West Northwest&quot;,&#10;                            &quot;Northwest&quot;,&#10;                            &quot;North Northwest&quot;&#10;                        ];&#10;                        var index = Math.floor(((deg + 11.25) % 360)/22.5);&#10;                        weather['wind direction'] = directions[index];&#10;                    }&#10;                }&#10;            }&#10;            if (parsed.name) {&#10;                weather['place name'] = parsed.name;&#10;            }&#10;            this.send('weather', weather);&#10;        } catch (err) {&#10;            error('Weather: Unable to parse response: ' + err.message);&#10;            this.send('weather', null);&#10;        }&#10;    } else {&#10;        this.send('price', null);&#10;    }&#10;    return response;&#10;};&#10;&#10;/** Convert the temperature in kelvins to the units specified in the&#10; *  temperature parameter. Also, round the result to a precision of&#10; *  0.01 degrees.&#10; *  @param kelvin The temperature in degrees Kelvin.&#10; *  @param units The units to convert to, one of 'Fahrenheit' or 'Celsius'.&#10; *  @return The temperature in the desired units.&#10; */&#10;function convertTemperature(kelvin, units) {&#10;    var result = kelvin;&#10;    if (units == 'Fahrenheit') {&#10;        result = (kelvin - 273.15) * 1.8 + 32.00;&#10;    } else if (units == 'Celsius') {&#10;        result = kelvin - 273.15;&#10;    }&#10;    return (Math.round(result * 100)/100);&#10;}&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/services/Weather.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="outputCompleteResponsesOnly" class="ptolemy.data.expr.Parameter">
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="{&quot;lat&quot;:37.85, &quot;lon&quot;:-122.26}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="location" class="ptolemy.actor.parameters.PortParameter" value="{latitude = 37.85, longitude = -122.26}">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{360.0, 275.0}">
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="&quot;http://api.openweathermap.org&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="/data/2.5/weather">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="temperature" class="ptolemy.data.expr.Parameter" value="Fahrenheit">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Retrieve weather information for a given location using&#10; http://openweathermap.org .&#10; The location input is given as an object with two numeric fields,&#10; &amp;quot;latitude&amp;quot; and &amp;quot;longitude&amp;quot;. The default is&#10; &lt;code&gt;{&amp;quot;latitude&amp;quot;: 37.85, &amp;quot;longitude&amp;quot;: -122.26}&lt;/code&gt;, which is&#10; the location of Berkeley, California.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires a &amp;quot;key&amp;quot; for the API, which you can&#10; obtain for free at http://openweathermap.org/appid .&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;location&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Weather.xml 74559 2016-02-24 02:09:11Z eal $$">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="An object containing current weather data.">
            </property>
            <property name="location (port)" class="ptolemy.kernel.util.StringAttribute" value="The location, an object with two fields (default is Berkeley).">
            </property>
        </property>
        <property name="key" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="location" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="weather" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="GeoCoder" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Retrieve a location given an address.&#10; *  The location is given as an object with two numeric fields,&#10; *  &quot;latitude&quot; and &quot;longitude&quot;. For example,&#10; *  `{&quot;latitude&quot;: 37.85, &quot;longitude&quot;: -122.26}` is&#10; *  the location of Berkeley, California.&#10; *&#10; *  This accessor requires a &quot;key&quot; for the Google Geocoding API, which you can&#10; *  obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *address* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  @accessor services/GeoCoder&#10; *  @author Edward A. Lee&#10; *  @version $$Id: Weather.xml 74559 2016-02-24 02:09:11Z eal $#&#10; *  @input {string} address The address, which defaults to &quot;Berkeley, CA&quot;.&#10; *  @parameter {string} key The key for the Google geocoding API.&#10; *  @output response An object containing the location information.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, get, getParameter, error, exports, extend, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    this.extend('net/REST');&#10;    this.input('address');&#10;    this.output('location');&#10;    this.parameter('key', {'type':'string', 'value':'Enter Key Here'});&#10;    &#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    // Note the need for quotation marks on the options parameter.&#10;    this.input('options', {'visibility':'expert', 'value':'&quot;https://maps.googleapis.com&quot;'});&#10;    this.input('command', {'visibility':'expert', 'value':'maps/api/geocode/json'});&#10;    // NOTE: The value can be given as a JSON string or a JavaScript object.&#10;    this.input('arguments', {'visibility':'expert', 'value':{&quot;address&quot;:&quot;Berkeley, CA&quot;, &quot;key&quot;:&quot;Enter Key Here&quot;}});&#10;    this.input('body', {'visibility':'expert'});&#10;    this.input('trigger', {'visibility':'expert'});&#10;    this.output('headers', {'visibility':'expert'});&#10;    this.output('status', {'visibility':'expert'});&#10;    this.parameter('outputCompleteResponsesOnly', {'visibility':'expert'});&#10;};&#10;&#10;exports.initialize = function() {&#10;    // Be sure to call the superclass so that the trigger input handler gets registered.&#10;    exports.ssuper.initialize.call(this);&#10;    &#10;    var key = this.getParameter('key');&#10;    if (key == &quot;Enter Key Here&quot;) {&#10;        throw &quot;GeoCoder:  You need a key, which you can obtain at https://developers.google.com/maps/documentation/geocoding/intro.&quot;;&#10;    }&#10;    var self = this;&#10;    &#10;    // Handle location information.&#10;    this.addInputHandler('address', function() {&#10;        var address = this.get('address');&#10;        if (address) {&#10;            // arguments is a reserved word, so we use args.&#10;            var args = {&#10;                'address' : address,&#10;                'key' : key&#10;            };&#10;            self.send('arguments', args);&#10;            self.send('trigger', true);&#10;        } else {&#10;            error('GeoCoder: No address.');&#10;            self.send('location', null);&#10;        }&#10;    });&#10;};&#10;&#10;/** Filter the response, extracting the latitude and longitude and&#10; *  formatting.&#10; */&#10;exports.filterResponse = function(response) {&#10;    if (response) {&#10;        try {&#10;            // NOTE: All of the following should be replaced with a generic&#10;            // schema transformation utility.&#10;            var parsed = JSON.parse(response);&#10;            // FIXME: Just taking the first result if there are multiple matches.&#10;            if (parsed.results &amp;&amp;&#10;                parsed.results[0] &amp;&amp;&#10;                parsed.results[0].geometry &amp;&amp;&#10;                parsed.results[0].geometry.location &amp;&amp;&#10;                parsed.results[0].geometry.location.lat &amp;&amp;&#10;                parsed.results[0].geometry.location.lng) {&#10;                this.send('location', {&#10;                        &quot;latitude&quot;: parsed.results[0].geometry.location.lat,&#10;                        &quot;longitude&quot;: parsed.results[0].geometry.location.lng&#10;                });&#10;            } else {&#10;                error('GeoCoder: No matching location.');&#10;                this.send('location', null);&#10;            }&#10;        } catch (err) {&#10;            error('GeoCoder: Unable to parse response: ' + err.message);&#10;        }&#10;    } else {&#10;        this.send('price', null);&#10;    }&#10;    return response;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/services/GeoCoder.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="outputCompleteResponsesOnly" class="ptolemy.data.expr.Parameter">
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="{&quot;address&quot;:&quot;Berkeley, CA&quot;,&quot;key&quot;:&quot;Enter Key Here&quot;}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{190.0, 265.0}">
        </property>
        <property name="key" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="&quot;https://maps.googleapis.com&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="maps/api/geocode/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Retrieve a location given an address.&#10; The location is given as an object with two numeric fields,&#10; &amp;quot;latitude&amp;quot; and &amp;quot;longitude&amp;quot;. For example,&#10; &lt;code&gt;{&amp;quot;latitude&amp;quot;: 37.85, &amp;quot;longitude&amp;quot;: -122.26}&lt;/code&gt; is&#10; the location of Berkeley, California.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires a &amp;quot;key&amp;quot; for the Google Geocoding API, which you can&#10; obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;address&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Weather.xml 74559 2016-02-24 02:09:11Z eal $#">
            </property>
            <property name="key (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The key for the Google geocoding API.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="An object containing the location information.">
            </property>
            <property name="address (port)" class="ptolemy.kernel.util.StringAttribute" value="The address, which defaults to &quot;Berkeley, CA&quot;.">
            </property>
        </property>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="address" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="InteractiveShell" class="ptolemy.actor.lib.gui.InteractiveShell">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={22, 100, 664, 492}, maximized=false}">
        </property>
        <doc>Produce strings from an interactive shell on the screen</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 265.0}">
        </property>
    </entity>
    <entity name="Merge" class="ptolemy.domains.de.lib.Merge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-95.0, 255.0}">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{480.0, 285.0}">
        </property>
    </entity>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Weather.location&quot;,x=360.0,y=275.0}, tail={id=&quot;GeoCoder.location&quot;,x=190.0,y=265.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;InteractiveShell.input&quot;,x=20.0,y=265.0}, tail={id=&quot;Merge.output&quot;,x=-95.0,y=255.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;GeoCoder.address&quot;,x=190.0,y=265.0}, tail={id=&quot;InteractiveShell.output&quot;,x=20.0,y=265.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Weather.weather&quot;,x=360.0,y=275.0}, tail={id=&quot;MicrostepDelay.input&quot;,x=480.0,y=285.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Merge.input&quot;,x=-95.0,y=255.0,index=2}, tail={id=&quot;MicrostepDelay.output&quot;,x=480.0,y=285.0}, points={-135.0,255.0,-135.0,350.0,575.0,350.0,575.0,285.0} } }">
        </property>
    </relation>
    <link port="SingleEvent.output" relation="relation2"/>
    <link port="Weather.location" relation="relation4"/>
    <link port="Weather.weather" relation="relation6"/>
    <link port="GeoCoder.address" relation="relation5"/>
    <link port="GeoCoder.location" relation="relation4"/>
    <link port="InteractiveShell.input" relation="relation3"/>
    <link port="InteractiveShell.output" relation="relation5"/>
    <link port="Merge.input" relation="relation2"/>
    <link port="Merge.input" relation="relation"/>
    <link port="Merge.output" relation="relation3"/>
    <link port="MicrostepDelay.input" relation="relation6"/>
    <link port="MicrostepDelay.output" relation="relation"/>
</entity>
