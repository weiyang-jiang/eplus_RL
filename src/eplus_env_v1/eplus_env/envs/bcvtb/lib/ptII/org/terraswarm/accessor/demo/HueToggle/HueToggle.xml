<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="HueToggle" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 140.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={325, 24, 918, 654}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[684, 544]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0787207555605132">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{241.9256629765257, 187.01232051849365}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Simple test example that toggles a hue light on and off&#10;every 3 seconds with a random color each time.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-10.0, -15.0]">
        </property>
    </property>
    <property name="CatchExceptionAttribute" class="ptolemy.actor.lib.CatchExceptionAttribute">
        <property name="policy" class="ptolemy.data.expr.StringParameter" value="throw">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="statusMessage">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{110, 315}">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This attribute can restart the model if&#10;an exception occurs, but make sure you want this!&#10;It can be hard to stop execution of the model.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 330.0}">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Set the IP address of Hue bridge here.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-10.0, 25.0]">
        </property>
    </property>
    <property name="bridgeIPAddress" class="ptolemy.data.expr.Parameter" value="&quot;192.168.1.221&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 65.0]">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="3.0">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{true}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{50.0, 230.0}">
        </property>
    </entity>
    <entity name="Sequence" class="ptolemy.actor.lib.Sequence">
        <property name="values" class="ptolemy.data.expr.Parameter" value="{false, true}">
        </property>
        <property name="repeat" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{205.0, 230.0}">
        </property>
    </entity>
    <entity name="Uniform" class="ptolemy.actor.lib.Uniform">
        <property name="lowerBound" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="upperBound" class="ptolemy.actor.parameters.PortParameter" value="65280">
        </property>
        <doc>Create a sequence of uniformly distributed random numbers</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[260.0, 125.0]">
        </property>
    </entity>
    <entity name="Hue2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &#10; *  It sets the parameters of the specified&#10; *  light according to the input values.&#10; *  &#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;. &#10; *  If there is no such user on the bridge, the script registers such a user and requests&#10; *  (via an alert dialog) that the&#10; *  link button on the bridge be pushed to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  If it fails to reach the bridge, it will try again a few times before giving up.&#10; *  &#10; *  Verifying the light: The final initialization step is to get a list of accessible lights.&#10; *  If the input light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; *  and may be valid in the future. Rather than terminating the model, we hope&#10; *  that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input {string} bridgeIPAddress The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @input {int} trigger Triggers a PUT request with all the light settings. Can be any type.&#10; *  @author Edward A. Lee, Marcus Pan &#10; *  @version $$Id: Hue.js 546 2016-02-03 02:07:57Z cxh $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout,  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;var retryCount = 0;&#10;&#10;// State variables.&#10;var timeout = 3000;&#10;var url = &quot;&quot;;&#10;var userName = &quot;&quot;;&#10;var reachableLights = [];&#10;var changedLights = [];&#10;var strReachableLights = &quot;&quot;;&#10;var handleRegisterUser;&#10;var registerInterval = 2000;&#10;var registerTimeout = 20000;&#10;var registerAttempts = 0;&#10;var handlers = [];&#10;&#10;// Uncomment the following to see the URL being used for the bridge.&#10;// alert(&quot;Connecting to: &quot; + bridge);&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    this.input('bridgeIPAddress', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.input('lightID', {&#10;        type: &quot;int&quot;,&#10;        value: 1&#10;    });&#10;    this.input('brightness', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    this.input('hue', {&#10;        type: &quot;number&quot;,&#10;        value: 65280&#10;    });&#10;    this.input('saturation', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    this.input('on', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.input('transitionTime', {&#10;        type: &quot;int&quot;,&#10;        value: 4&#10;    });&#10;    this.input('trigger', {value: true});&#10;};&#10;&#10;/** Initialize connection.&#10; *  Register user if not registered&#10; *  Input handlers are not added here in case we need to wait for user to register.&#10; *  @param retry True if this is a retry.&#10; */&#10;exports.initialize = function(retry) {&#10;&#10;    if (!retry) {&#10;        retryCount = 0;&#10;    }&#10;	&#10;    var ipAddress = this.get('bridgeIPAddress');&#10;    userName = this.getParameter('userName');&#10;&#10;    if (userName.length &lt; 11) {&#10;        throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;    }&#10;&#10;    if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;        throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;    }&#10;&#10;    url = &quot;http://&quot; + ipAddress + &quot;/&quot;;&#10;    &#10;    var self = this;&#10;    &#10;    // First make sure the bridge is actually there and responding.&#10;    var bridgeRequest = http.get(url, function (response) {&#10;    	if (response !== null) {&#10;    	    // NOTE: null response is handled by the error handler registered below.&#10;	        if (response.statusCode != 200) {&#10;	            // Response is other than OK.&#10;	            bridgeRequestErrorHandler.call(self, response.statusMessage);&#10;	        } else {&#10;	            // Contacting the bridge succeeded. Next step is validating that the&#10;	            // provided username is valid.&#10;	            url = url + &quot;api/&quot;;&#10;	            http.get(url + userName + '/', function (response) {&#10;	            	if (response !== null) {&#10;		                if (response.statusCode == 200) {&#10;		                    var lights = JSON.parse(response.body);&#10;		&#10;		                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;		                        var description = lights[0].error.description;&#10;		&#10;		                        if (description.match(&quot;unauthorized user&quot;)) {&#10;		                            // Add this user.&#10;		                            error(userName + &quot; is not a registered user.\n&quot; +&#10;		                                        &quot; Push the link button on the Hue bridge to register.&quot;);&#10;		                            registerUser.call(self);&#10;		                        } else {&#10;		                            console.error('Error occurred when trying to get Hue light status.');&#10;		                            error(description);&#10;		                        }&#10;		                    } else if (lights.lights) {&#10;		                        // Proceed to next stage of initialization&#10;		                        getReachableLights.call(self);&#10;		                    } else {&#10;		                        error(&quot;Unknown error. Could not authorize user.&quot;);&#10;		                    }&#10;		                } else {&#10;		                    error('Error with HTTP GET for lights status. Code: ' + response.statusCode);&#10;		                }&#10;	            	}&#10;                }).on('error', bridgeRequestErrorHandler.bind(this));&#10;	        }&#10;    	}&#10;    });&#10;    bridgeRequest.on('error', bridgeRequestErrorHandler.bind(this));&#10;};&#10;&#10;/** Handle an error. This will report it on the console and then retry a fixed number&#10; *  of times before giving up.  A retry is a re-invocation of initialize().&#10; */&#10;function bridgeRequestErrorHandler(err) {&#10;    // FIXME: We should do a UPnP discovery here and find a bridge.&#10;    // Could not connect to the bridge&#10;    console.log('Error connecting to Hue basestation.');&#10;    console.error(err);&#10;    // FIXME: Hardwired constants for number of retries and time between retries.&#10;    if (retryCount &lt; 5) {&#10;        console.log('Will retry');&#10;        retryCount++;&#10;        var self = this;&#10;        setTimeout(function() {&#10;            exports.initialize.call(self, true);&#10;        }, 1000);&#10;    } else {&#10;        error('Could not reach the Hue basestation at ' +&#10;                this.get('bridgeIPAddress') +&#10;                ' after ' + retryCount + ' attempts.');&#10;    }&#10;}&#10;&#10;/** Register a new user.&#10; *  This function repeats at registerInterval until registration is&#10; *  successful, or until registerTimeout.&#10; *  It does so because it needs to wait until the user clicks&#10; *  the button on the Hue bridge.&#10; */&#10;function registerUser() {&#10;&#10;	var registerData = {&#10;		devicetype : userName,&#10;		username : userName&#10;	};&#10;    var options = {&#10;    		body : JSON.stringify(registerData),&#10;    		timeout: 10000,&#10;    		url : url&#10;    };&#10;    &#10;    var self = this;&#10;    &#10;    http.post(options, function(response) {&#10;    	console.log('Request: ' + JSON.stringify(options) + '\nResponse: ' + JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            var description = response[0].error.description;&#10;&#10;            if (description.match(&quot;link button not pressed&quot;)) {&#10;                //repeat registration attempt unless registerTimeout has been reached&#10;                console.log('link button');&#10;                registerAttempts++;&#10;                if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;                    throw &quot;Failed to create user after &quot; + registerTimeout/1000 +&#10;                        &quot;s.&quot;;&#10;                }&#10;                handleRegisterUser = setTimeout(registerUser.bind(self), registerInterval);&#10;                return;&#10;            } else {&#10;                throw description;&#10;            }&#10;        } else if ((isNonEmptyArray(response) &amp;&amp; response[0].success) || &#10;        		JSON.parse(response.body)[0].success) {&#10;        		&#10;            //registration is successful - proceed to next stage of initialization&#10;            if (handleRegisterUser !== null) {&#10;                clearTimeout(handleRegisterUser);&#10;            }&#10;            getReachableLights.call(self);&#10;        } else {&#10;        	console.log(&quot;response &quot; + JSON.stringify(response));&#10;        	console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;            throw &quot;Error registering new user&quot;;&#10;        }&#10;    });&#10;}&#10;&#10;/** This function is only called after user has been registered.&#10; * Get reachable lights.&#10; * Add input handlers&#10; */&#10;function getReachableLights() {&#10;    url = url + userName + &quot;/&quot; + &quot;lights/&quot;;&#10;    http.get(url, function (response) {&#10;        if (response.statusCode == 200) {&#10;            var lights = JSON.parse(response.body);&#10;            for (var id in lights) {&#10;                if (lights[id].state.reachable) {&#10;                    reachableLights.push(id);&#10;                    console.log('Reachable bulb ID: ' + id);&#10;                }&#10;            }&#10;        }&#10;    });&#10;    this.addInputHandler('trigger', inputHandler.bind(this));&#10;}&#10;&#10;/** Get light settings from inputs and PUT */&#10;function inputHandler() {&#10;    // Check if light is reachable&#10;    var lightID = this.get('lightID').toString();&#10;    if (reachableLights.indexOf(lightID) == -1) {&#10;        console.log('Light ' + lightID + ' may not be reachable.');&#10;    }&#10;    // Keep track of changed lights to turn off during wrap up&#10;    if (changedLights.indexOf(lightID) == -1) {&#10;        changedLights.push(lightID);&#10;    }&#10;&#10;    // Get inputs and send command to light&#10;    var command = {&#10;        on: this.get('on') === true,&#10;        bri: limit(this.get('brightness'), 0, 255),&#10;        hue: limit(this.get('hue'), 0, 65280),&#10;        sat: limit(this.get('saturation'), 0, 255),&#10;        transitiontime: limit(this.get('transitionTime'), 0, 65535)&#10;    };&#10;&#10;    var cmd = JSON.stringify(command);&#10;    var options = {&#10;    		body : cmd,&#10;    		timeout : 10000,&#10;    		url : url + lightID + &quot;/state/&quot;&#10;    };&#10;    &#10;    http.put(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            error(&quot;Server responds with error: &quot; + response[0].error.description);&#10;        } &#10;    });&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = { };&#10;    &#10;    for (var i = 0; i &lt; changedLights.length; i++) {&#10;        options = {&#10;            body : cmd,&#10;            timeout : 10000, &#10;            url : url + changedLights[i] + &quot;/state/&quot;&#10;        };&#10;        &#10;        var self = this;&#10;        &#10;        http.put(options, function(response) {&#10;        	console.log(JSON.stringify(response));&#10;            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;                var lightID = self.get('lightID').toString();&#10;                errorLights.push(lightID);&#10;            }&#10;        });&#10;    }&#10;&#10;    if (errorLights.length !== 0) {&#10;        error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;    }&#10;};&#10;&#10;/** Utility function to check that an object is a nonempty array.&#10; *  @param obj The object.&#10; */&#10;function isNonEmptyArray(obj) {&#10;    return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;}&#10;&#10;/** Utility function to limit the range of a number&#10; *  and to force it to be an integer. If the value argument&#10; *  is a string, then it will be converted to a Number.&#10; *  @param value The value to limit.&#10; *  @param low The low value.&#10; *  @param high The high value.&#10; */&#10;function limit(value, low, high) {&#10;    var parsed = parseInt(value);&#10;    if (!parsed) {&#10;        error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;        return 0;&#10;    }&#10;    if (parsed &lt; low) {&#10;        return low;&#10;    } else if (parsed &gt; high) {&#10;        return high;&#10;    } else {&#10;        return parsed;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb.&lt;/p&gt;&#10;&lt;p&gt; It sets the parameters of the specified&#10; light according to the input values.&lt;/p&gt;&#10;&lt;p&gt; Logging on: This script attempts to access the bridge as a user with&#10; name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &amp;quot;ptolemyuser&amp;quot;. &#10; If there is no such user on the bridge, the script registers such a user and requests&#10; (via an alert dialog) that the&#10; link button on the bridge be pushed to authorize registration of this user.&#10; The user is given 20s to do this before an exception is thrown&#10; If it fails to reach the bridge, it will try again a few times before giving up.&lt;/p&gt;&#10;&lt;p&gt; Verifying the light: The final initialization step is to get a list of accessible lights.&#10; If the input light is not accessible, this accessor warns but does not error.&#10; Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; and may be valid in the future. Rather than terminating the model, we hope&#10; that the lights come back.&lt;/p&gt;&#10;&lt;p&gt; Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; The bridge acquires its address via DHCP, so the address will typically change&#10; each time the bridge is rebooted. Moreover, the address will likely not be&#10; accessible except on the local network.  The bridge responds to UPnP packets&#10; (universal plug-and-play), so it is possible to use software such as&#10; &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; swarmlet could be created that runs periodically on a local network and publishes&#10; the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Hue.js 546 2016-02-03 02:07:57Z cxh $$">
            </property>
            <property name="bridgeIPAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lightID (port)" class="ptolemy.kernel.util.StringAttribute" value="The light identifier (an integer beginning with 1).">
            </property>
            <property name="brightness (port)" class="ptolemy.kernel.util.StringAttribute" value="The brightness (an integer between 0 and 255).">
            </property>
            <property name="hue (port)" class="ptolemy.kernel.util.StringAttribute" value="The hue (an integer between 0 and 62580).">
            </property>
            <property name="saturation (port)" class="ptolemy.kernel.util.StringAttribute" value="The saturation (an integer between 0 and 255).">
            </property>
            <property name="transitionTime (port)" class="ptolemy.kernel.util.StringAttribute" value="The transition time, in multiples of 100ms.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Triggers a PUT request with all the light settings. Can be any type.">
            </property>
            <property name="on (port)" class="ptolemy.kernel.util.StringAttribute" value="Whether the light is on (true) or off (false).">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The user name for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="$bridgeIPAddress">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="ptolemyuser">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="65280">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[440.0, 135.0]">
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{130.0, 230.0}">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation4"/>
    <link port="Sequence.enable" relation="relation4"/>
    <link port="Sequence.output" relation="relation"/>
    <link port="Uniform.output" relation="relation3"/>
    <link port="Uniform.trigger" relation="relation4"/>
    <link port="Hue2.hue" relation="relation3"/>
    <link port="Hue2.on" relation="relation"/>
</entity>
