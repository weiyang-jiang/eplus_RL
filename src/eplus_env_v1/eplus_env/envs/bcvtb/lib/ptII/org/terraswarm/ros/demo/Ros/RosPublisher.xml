<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="RosPublisher" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[420.0, 25.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={495, 106, 945, 745}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[711, 635]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.640000000000005">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{549.8838541666667, 447.8196180555554}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
        </property>
        <property name="fontFamily" class="ptolemy.data.expr.StringParameter" value="SansSerif">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A demo for running the RosPublisher and RosSubscriber accessor.&#10;Open the RosPublisher and RosSubscriber model by clicking on the links. &#10;&#10;Start up ROS and rosbridge on an Ubuntu machine:&#10;&#10;&#10;&#10;&#10;Start RosPublisher to a publish to a topic. Then start RosSubscriber to listen to the topic. ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[265.0, 240.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="fontFamily" class="ptolemy.data.expr.StringParameter" value="Monospaced">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="$roscore&#10;$roslaunch rosbridge_server rosbridge_websocket.launch&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 320.0]">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <property name="offsets" class="ptolemy.data.expr.Parameter" value="{0.0}">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{{data = &quot;im an accessor publisher&quot;}}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[420.0, 135.0]">
        </property>
    </entity>
    <entity name="RosPublisher" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor advertises and publishes to a ROS topic. It extends&#10; * the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&#10; *&#10; * During intialize, it will advertise the topic it will publish to,&#10; * along with its type. The purpose of 'advertise' here is to&#10; * establish the ROS topic if isn't already established. This is&#10; * slightly different from the 'advertise' function in NodeHandle&#10; * which simply publicizes that the the node will be publishing&#10; * messages to the topic.&#10; * &lt;ul&gt;&#10; * &lt;li&gt;If the topic does not already exist, and the type is valid, a&#10; * topic will be established with this type.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with a different type, no new topic&#10; * will be established&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with the same type, no new topic&#10; * will be established.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10; * topic will be established.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; *&#10; *  On input from 'toSend', this accessor publishes that input to the &#10; *  aforementioned topic. &#10; *  The input from 'toSend' must be in JSON form, and must match the message&#10; *  datatype that the ROS topic is expecting. For example if ROS topic is &#10; *  expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; *  as follows:&#10; *  &lt;pre&gt; { &quot;data&quot;: &quot;hello world&quot; } &lt;/pre&gt;&#10; *  Some ROS types contain a header which consists of a sequence,&#10; *  timestamp, and a frame_id. If the ROS type has a header, you can&#10; *  either:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt;send the message on toSend without the header, and check the&#10; *  parameter 'addHeader'. This sends the message with a header with&#10; *  only the frame_id specified, and rosbridge will add the sequence&#10; *  and timestamp for you.&lt;/li&gt;&#10; *  &lt;li&gt;send a fully formed message with all fields in the header&#10; *  included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; *  &lt;/ul&gt;&#10; *  This accessor doesn't do any error checking. All error messages&#10; *  orginate from rosbridge and will appear on the console running&#10; *  rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; *  protocol specification&lt;/a&gt; site.&#10; *&#10; *  @accessor robotics/RosPublisher&#10; *  @parameter {string} topic The ROS topic to publish to.&#10; *  @parameter {string} ROStype The ROS datatype of the topic.&#10; *  @parameter {boolean} addHeader If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.&#10; *  @parameter {string} frame_id The frame_id of the header (only needed if a header is required).&#10; *  @author Marcus Pan &#10; *  @version $$Id: RosPublisher.js 533 2016-01-31 23:17:46Z eal $$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals exports, extend, get, getParameter, parameter */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs from setup() in&#10; * WebSocketClient. Adds additional parameters regarding the ROS topic&#10; * to which to publish to.&#10; */ &#10;exports.setup = function() {&#10;    this.extend('net/WebSocketClient');&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('ROStype', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('addHeader', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.parameter('frame_id', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;};&#10;&#10;/** Override inputHandler on 'toSend' from WebSocketClient. */&#10;exports.toSendInputHandler = function() {&#10;    var msg = this.get('toSend');&#10;    // Add a header with a blank time and sequence info. This will be added by rosbridge.&#10;    if (this.getParameter('addHeader')) {&#10;        msg.header = {&#10;            &quot;frame_id&quot;: this.getParameter('frame_id')&#10;        };&#10;    }&#10;    &#10;    var data = {&#10;        &quot;op&quot;: &quot;publish&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;msg&quot;: msg &#10;    };&#10;    &#10;    this.exports.sendToWebSocket.call(this, data);&#10;};&#10;&#10;/**  Inherits initialize from WebSocketClient. &#10; *   Advertise the topic we are publishing to.&#10; */ &#10;exports.initialize = function() {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    var advertise = {&#10;        &quot;op&quot;: &quot;advertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;type&quot;: this.getParameter('ROStype')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, advertise);&#10;    &#10;};&#10;&#10;/** Unadvertise the topic and inherit wrapup from WebSocketClient. */&#10;exports.wrapup = function() {&#10;    var unadvertise = {&#10;        &quot;op&quot;: &quot;unadvertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unadvertise);&#10;    this.ssuper.wrapup();&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/robotics/RosPublisher.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/noise">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="ROStype" class="ptolemy.data.expr.StringParameter" value="std_msgs/String">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="addHeader" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="frame_id" class="ptolemy.data.expr.StringParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[580.0, 135.0]">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="connectTimeout" class="ptolemy.data.expr.Parameter" value="60000">
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor advertises and publishes to a ROS topic. It extends&#10;the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&lt;/p&gt;&#10;&lt;p&gt;During intialize, it will advertise the topic it will publish to,&#10;along with its type. The purpose of 'advertise' here is to&#10;establish the ROS topic if isn't already established. This is&#10;slightly different from the 'advertise' function in NodeHandle&#10;which simply publicizes that the the node will be publishing&#10;messages to the topic.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the topic does not already exist, and the type is valid, a&#10;topic will be established with this type.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with a different type, no new topic&#10;will be established&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with the same type, no new topic&#10;will be established.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10;topic will be established.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt; On input from 'toSend', this accessor publishes that input to the &#10; aforementioned topic. &#10; The input from 'toSend' must be in JSON form, and must match the message&#10; datatype that the ROS topic is expecting. For example if ROS topic is &#10; expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; as follows:&#10; &lt;pre&gt; { &amp;quot;data&amp;quot;: &amp;quot;hello world&amp;quot; } &lt;/pre&gt;&#10; Some ROS types contain a header which consists of a sequence,&#10; timestamp, and a frame_id. If the ROS type has a header, you can&#10; either:&#10; &lt;ul&gt;&#10; &lt;li&gt;send the message on toSend without the header, and check the&#10; parameter 'addHeader'. This sends the message with a header with&#10; only the frame_id specified, and rosbridge will add the sequence&#10; and timestamp for you.&lt;/li&gt;&#10; &lt;li&gt;send a fully formed message with all fields in the header&#10; included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; &lt;/ul&gt;&#10; This accessor doesn't do any error checking. All error messages&#10; orginate from rosbridge and will appear on the console running&#10; rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; protocol specification&lt;/a&gt; site.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: RosPublisher.js 533 2016-01-31 23:17:46Z eal $$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to publish to.">
            </property>
            <property name="ROStype (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS datatype of the topic.">
            </property>
            <property name="addHeader (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.">
            </property>
            <property name="frame_id (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The frame_id of the header (only needed if a header is required).">
            </property>
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="RosPublisher.toSend" relation="relation"/>
</entity>
