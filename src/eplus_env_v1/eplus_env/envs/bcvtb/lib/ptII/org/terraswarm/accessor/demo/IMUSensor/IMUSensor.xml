<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="IMUSensor" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 23, 1440, 873}, maximized=true}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1206, 763]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000016">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{596.0000000000003, 372.49999999999994}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{95, 50}">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model uses an IMUSensor accessor (requires IMUSensor module) to connect&#10;to one of Roozbeh's IMU sensors over a ttyS/COM port (depending on OS).&#10;&#10;The sensor will need to be already connected or paired to the specified port.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 210.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0} ">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="To connect one of the IMUs in Linux systems, follow the following steps:&#10;&#10;-Install bluez: &gt; sudo apt-get install bluez&#10;&#10;-Check that the system has a bluetooth-enabled device: &gt; hcitool dev&#10;example output:&#10;Devices:&#10;    hci0    00:1B:DC:06:9F:29&#10;&#10;-Scan for available bluetooth sensors: &gt; hcitool scan&#10;example output:&#10;Scanning ...&#10;    EC:FE:7E:10:DE:FF   BlueRadios10DEFF&#10;&#10;-Modify /etc/bluetooth/rfcomm.conf  :&#10;#&#10;# # RFCOMM configuration file. &#10;#&#10;&#10;rfcomm0 { &#10;# # Automatically bind the device at startup &#10;# bind yes;&#10;&#10;# # Bluetooth address of the device &#10;# device EC:FE:7E:10:DE:FF; &#10;&#10;# # RFCOMM channel for the connection &#10;# channel 1&#10;&#10;# # Description of the connection &#10;# comment &quot;Bluetooth device 1&quot;;&#10;}&#10;&#10;-Create a bluetooth-agent: &gt; bluetooth-agent 1234 &amp;&#10;-Connect rfcomm to device: &gt; rfcomm connect hci0 EC:FE:7E:10:DE:FF &amp;&#10;-Link ttyS port: &gt; ln -s /dev/rfcomm0 /dev/ttyS40&#10;&#10;'40' in above could be any number, so long as the number is currently unused.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[475.0, 15.0]">
        </property>
    </property>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={687, 588, 971, 221}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[971, 172]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 135.0]">
        </property>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for bluetooth sensor stream.&#10;var imuSensor = require('IMUSensor');&#10;&#10;// Set up the accessor.&#10;exports.setup = function() {&#10;    accessor.author('Hunter');&#10;    accessor.version('0.1 $$Date: 2016-01-31 14:04:05 -0800 (Sun, 31 Jan 2016) $$');&#10;    this.parameter('port', {&#10;            'type' : 'number',&#10;            'description' : 'The port used by the sensor'&#10;        });&#10;    this.parameter('samplingRate', {'description':'Sampling rate of sensor, rate to grab data from buffer in ms'});&#10;    this.output('stream', {&#10;                'description' : 'The stream obtained from the sensor'&#10;        });&#10;};&#10;&#10;var stream = new imuSensor.Stream();&#10;var handle;&#10;&#10;// Initialize by hooking to sensor port and setting interval for obtaining samples&#10;exports.initialize = function() {&#10;    // Instantiate a stream&#10;    // This should hook the sensor stream and start filling a buffer Java-side automatically&#10;    stream.start(getParameter('port'));&#10;    handle = setInterval(getLatestSample.bind(this), this.getParameter('samplingRate'));&#10;}&#10;&#10;var prevSample = [[0,0,0,0,0,0,0,0,0],[]];&#10;&#10;// function to invoke on interval, grab a sample from the buffer. Have to determine if sample is a new one.&#10;var getLatestSample = function() {&#10;    var sample = stream.getSample();&#10;        if (prevSample[0][0] == sample[0][0]) {&#10;        }&#10;        else {&#10;           prevSample = sample;&#10;           sample = sample[0].map(Number);&#10;&#10;           // convert the samples to real values from their ADC values&#10;           sample[0] = sample[0]/16384;&#10;           sample[1] = sample[1]/16384;&#10;           sample[2] = sample[2]/16384;&#10;           sample[3] = sample[3]/131;&#10;           sample[4] = sample[4]/131;&#10;           sample[5] = sample[5]/131;&#10;           sample[6] = sample[6]/3.3;&#10;           sample[7] = sample[7]/3.3;&#10;           sample[8] = sample[8]/3.3;&#10;           sample = JSON.stringify([sample,[]]);&#10;           this.send('stream', sample);&#10;        }&#10;}&#10;&#10;// Called on stop&#10;exports.wrapup = function() {&#10;    if (stream != null) {&#10;        stream.stop();&#10;    }&#10;    clearInterval(handle);&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 135.0]">
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="40">
        </property>
        <property name="samplingRate" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Hunter">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="0.1 $$Date: 2016-01-31 14:04:05 -0800 (Sun, 31 Jan 2016) $$">
            </property>
            <property name="port" class="ptolemy.kernel.util.StringAttribute" value="The port used by the sensor">
            </property>
            <property name="samplingRate" class="ptolemy.kernel.util.StringAttribute" value="Sampling rate of sensor, rate to grab data from buffer in ms">
            </property>
            <property name="stream" class="ptolemy.kernel.util.StringAttribute" value="The stream obtained from the sensor">
            </property>
        </property>
        <port name="stream" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Display.input" relation="relation"/>
    <link port="JavaScript.stream" relation="relation"/>
</entity>
