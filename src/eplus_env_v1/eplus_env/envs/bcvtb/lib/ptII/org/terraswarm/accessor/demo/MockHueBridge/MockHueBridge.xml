<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="MockHueBridge" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={30, 27, 1255, 677}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1027, 560]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.2132753695621266">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{560.2696786221588, 166.3408203125}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="60">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[210.0, -25.0]">
        </property>
    </property>
    <property name="WebServer" class="org.ptolemy.ptango.lib.WebServer">
        <property name="preferredPort" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="resourceLocation" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/org/ptolemy/ptango/test/auto/pages">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[690.0, 35.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="port" class="ptolemy.data.expr.Parameter" value="8078">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[670.0, 100.0]">
        </property>
    </property>
    <property name="bridgeIPAddress" class="ptolemy.data.expr.Parameter" value="&quot;localhost:8078&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[670.0, 115.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo illustrates how to use the MockHueBridge accessor&#10;in place of a physical Hue bridge.  The demo simulates a traffic light.&#10;&#10;New user registration occurs first, so there may be some initial delay.&#10;&#10;&#10;">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[155.0, 15.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo requires svgSalamander located in $PTII/lib/svgSalamander.jar&#10;&#10;&#10;">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[155.0, 100.0]">
        </property>
    </property>
    <entity name="Service" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 330.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={47, 23, 1205, 652}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[971, 542]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000004">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{921.1522691082803, 334.68570859872614}">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Route incoming GET, POST and PUT requests to MockHueBridge accessors.">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{635.0, 125.0}">
            </property>
        </property>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1080.0, 450.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/*">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[690.0, 330.0]">
            </property>
            <port name="postBody" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="putBody" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 220.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="Const2" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;GET&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[870.0, 320.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;PUT&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[815.0, 440.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[765.4483947753906, 510.3916778564453]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MockHueBridge3" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &lt;p&gt; This accessor simulates selected features of a Hue light bridge.  &#10; * It accepts commands in the form of http requests (URL and body), and &#10; * simulates the output of a Hue light bridge.  The simulated bridge has&#10; * two lights which all start in the off state with 0 for hue, saturation&#10; * and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10; * module.  &#10; * &lt;/p&gt;&#10; * &#10; *  &lt;p&gt; Some Hue examples are available here:&#10; *  http://www.developers.meethue.com/documentation/getting-started&#10; *  with the full API available here (free registration required):&#10; *  http://www.developers.meethue.com/philips-hue-api&#10; *  Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; *  &lt;/p&gt;&#10; *  &#10; *  &lt;p&gt; The following API requests are implemented.  Each request &#10; *  (other than GET /  and POST /api/) is checked for user authorization.&#10; *  Any new username registration request will be accepted.&#10; *  &#10; *  GET /&#10; *  Check if bridge is available.  Returns {available : true}. &#10; *  &#10; *  POST /api/&#10; *  Add a user to list of registered users, optionally specifying a username.  &#10; *  Body is of the form &#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;} &#10; *  to request a newly generated username, where &quot;devicetype&quot; is of the form&#10; *  &lt;application_name&gt;#&lt;devicename&gt;&#10; *  Add a &quot;username&quot; field to explicitly specify the username,&#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;, &quot;username&quot;: &quot;peter&quot;}&#10; *  Returns a list with a single item indicating success or failure, and the&#10; *  (possibly newly generated) username, e.g.:&#10; *  [{&quot;success&quot;:{&quot;username&quot;: &quot;83b7780291a6ceffbe0bd049104df&quot;}}]&#10; *  &#10; *  GET /api/&lt;username&gt;/&#10; *  Get entire datastore. &#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&#10; *  GET information on all lights.&#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; *  Get information about the light with id &lt;id&gt; .&#10; *  &#10; *  PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; *  Set the state of the light with id &lt;id&gt; .&#10; *  &#10; *  Other requests return {supported : false} .&#10; *  &lt;/p&gt;&#10; * &#10; *  @accessor devices/MockHueBridge&#10; *  @input {string} URI The path of the request.  &#10; *  @input {string} method The HTTP request method.&#10; *  @input {JSON} body The body of the HTTP request, if any.&#10; *  @output {string} response The response to be returned to the HTTP request.&#10; *  @output {JSON} state The state of the bridge.  May include multiple lights.&#10; *  @parameter {string} bridgeID The identifier of the bridge to access.  Can be &#10; *    any string.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, input, output, parameter, send, removeInputHandler, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var mockHueBridges = require(&quot;mockHueBridges&quot;);&#10;var bridge;&#10;var connection;&#10;var handle;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  this.input('URI', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  this.input('method', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;GET&quot;&#10;  });&#10;  this.input('body', {&#10;	  type: &quot;JSON&quot;,&#10;	  value: &quot;&quot;&#10;  });&#10;  this.output('response', {&#10;	    type: &quot;string&quot;,&#10;	    value: &quot;&quot;&#10;	  });&#10;  this.output('state', {&#10;		  type: &quot;JSON&quot;,&#10;		  value: &quot;&quot;&#10;  });&#10;  this.parameter('bridgeID', {&#10;	  type: &quot;string&quot;,&#10;	  value: &quot;Bridge1&quot;&#10;  });&#10;};&#10;&#10;/** Initialize the accessor.  Create a bridge object, connect to the bridge, and &#10; * initialize its state.&#10; */&#10;exports.initialize = function() {&#10;	// mockHueBridges.MockHueBridge is an object containing the results&#10;	// of a self-executing function.  This, in essence, creates a singleton&#10;	// object with a set of functions as its public API.&#10;	bridge = mockHueBridges.MockHueBridge;&#10;	connection = bridge.connect(this.get('bridgeID'));&#10;	connection.initializeToDefault();&#10;	&#10;	var self = this;&#10;	&#10;	/** React to a change in the bridge state by outputting the new state.  */&#10;	connection.on('change', function(data) {&#10;		self.send('state', data);&#10;	});&#10;  &#10;	// Register input handler&#10;	handle = this.addInputHandler('URI', inputHandler.bind(this));&#10;};&#10;&#10;/** Input HTTP request information and generate a response from the bridge.  */&#10;function inputHandler() {&#10;  var method = this.get('method').toString();&#10;  var uri = this.get('URI').toString();&#10;  var output;&#10;  &#10;  // Check if body exists.  If so, include the body in the command.&#10;  var body = this.get('body');&#10;  if (typeof body !== 'undefined') {&#10;	  output = connection.command(method, uri, body);&#10;  } else {&#10;	  output = connection.command(method, uri);&#10;  }&#10; &#10;  this.send('response', output);&#10;}&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    this.removeInputHandler(handle);&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/devices/MockHueBridge.js">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[935.0, 440.0]">
            </property>
            <property name="URI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="method" class="ptolemy.actor.parameters.PortParameter" value="PUT">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="body" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="bridgeID" class="ptolemy.data.expr.Parameter" value="Bridge1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt; This accessor simulates selected features of a Hue light bridge.&lt;br&gt;It accepts commands in the form of http requests (URL and body), and &#10;simulates the output of a Hue light bridge.  The simulated bridge has&#10;two lights which all start in the off state with 0 for hue, saturation&#10;and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10;module.&lt;br&gt;&lt;/p&gt;&#10;&#10; &lt;p&gt; Some Hue examples are available here:&#10; http://www.developers.meethue.com/documentation/getting-started&#10; with the full API available here (free registration required):&#10; http://www.developers.meethue.com/philips-hue-api&#10; Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt; The following API requests are implemented.  Each request &#10; (other than GET /  and POST /api/) is checked for user authorization.&#10; Any new username registration request will be accepted.&#10;&#10; GET /&#10; Check if bridge is available.  Returns {available : true}. &#10;&#10; POST /api/&#10; Add a user to list of registered users, optionally specifying a username.&lt;br&gt; Body is of the form &#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;} &#10; to request a newly generated username, where &amp;quot;devicetype&amp;quot; is of the form&#10; &lt;application_name&gt;#&lt;devicename&gt;&#10; Add a &amp;quot;username&amp;quot; field to explicitly specify the username,&#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;peter&amp;quot;}&#10; Returns a list with a single item indicating success or failure, and the&#10; (possibly newly generated) username, e.g.:&#10; [{&amp;quot;success&amp;quot;:{&amp;quot;username&amp;quot;: &amp;quot;83b7780291a6ceffbe0bd049104df&amp;quot;}}]&#10;&#10; GET /api/&lt;username&gt;/&#10; Get entire datastore. &#10;&#10; GET /api/&lt;username&gt;/lights/&#10; GET information on all lights.&#10;&#10; GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; Get information about the light with id &lt;id&gt; .&#10;&#10; PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; Set the state of the light with id &lt;id&gt; .&#10;&#10; Other requests return {supported : false} .&#10; &lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$">
                </property>
                <property name="bridgeID (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The identifier of the bridge to access.  Can be &#10;   any string.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The response to be returned to the HTTP request.">
                </property>
                <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="The state of the bridge.  May include multiple lights.">
                </property>
                <property name="URI (port)" class="ptolemy.kernel.util.StringAttribute" value="The path of the request.">
                </property>
                <property name="method (port)" class="ptolemy.kernel.util.StringAttribute" value="The HTTP request method.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The body of the HTTP request, if any.">
                </property>
            </property>
            <port name="URI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="method" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="body" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="state" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
        </entity>
        <entity name="MockHueBridge2" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &lt;p&gt; This accessor simulates selected features of a Hue light bridge.  &#10; * It accepts commands in the form of http requests (URL and body), and &#10; * simulates the output of a Hue light bridge.  The simulated bridge has&#10; * two lights which all start in the off state with 0 for hue, saturation&#10; * and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10; * module.  &#10; * &lt;/p&gt;&#10; * &#10; *  &lt;p&gt; Some Hue examples are available here:&#10; *  http://www.developers.meethue.com/documentation/getting-started&#10; *  with the full API available here (free registration required):&#10; *  http://www.developers.meethue.com/philips-hue-api&#10; *  Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; *  &lt;/p&gt;&#10; *  &#10; *  &lt;p&gt; The following API requests are implemented.  Each request &#10; *  (other than GET /  and POST /api/) is checked for user authorization.&#10; *  Any new username registration request will be accepted.&#10; *  &#10; *  GET /&#10; *  Check if bridge is available.  Returns {available : true}. &#10; *  &#10; *  POST /api/&#10; *  Add a user to list of registered users, optionally specifying a username.  &#10; *  Body is of the form &#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;} &#10; *  to request a newly generated username, where &quot;devicetype&quot; is of the form&#10; *  &lt;application_name&gt;#&lt;devicename&gt;&#10; *  Add a &quot;username&quot; field to explicitly specify the username,&#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;, &quot;username&quot;: &quot;peter&quot;}&#10; *  Returns a list with a single item indicating success or failure, and the&#10; *  (possibly newly generated) username, e.g.:&#10; *  [{&quot;success&quot;:{&quot;username&quot;: &quot;83b7780291a6ceffbe0bd049104df&quot;}}]&#10; *  &#10; *  GET /api/&lt;username&gt;/&#10; *  Get entire datastore. &#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&#10; *  GET information on all lights.&#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; *  Get information about the light with id &lt;id&gt; .&#10; *  &#10; *  PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; *  Set the state of the light with id &lt;id&gt; .&#10; *  &#10; *  Other requests return {supported : false} .&#10; *  &lt;/p&gt;&#10; * &#10; *  @accessor devices/MockHueBridge&#10; *  @input {string} URI The path of the request.  &#10; *  @input {string} method The HTTP request method.&#10; *  @input {JSON} body The body of the HTTP request, if any.&#10; *  @output {string} response The response to be returned to the HTTP request.&#10; *  @output {JSON} state The state of the bridge.  May include multiple lights.&#10; *  @parameter {string} bridgeID The identifier of the bridge to access.  Can be &#10; *    any string.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, input, output, parameter, send, removeInputHandler, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var mockHueBridges = require(&quot;mockHueBridges&quot;);&#10;var bridge;&#10;var connection;&#10;var handle;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  this.input('URI', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  this.input('method', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;GET&quot;&#10;  });&#10;  this.input('body', {&#10;	  type: &quot;JSON&quot;,&#10;	  value: &quot;&quot;&#10;  });&#10;  this.output('response', {&#10;	    type: &quot;string&quot;,&#10;	    value: &quot;&quot;&#10;	  });&#10;  this.output('state', {&#10;		  type: &quot;JSON&quot;,&#10;		  value: &quot;&quot;&#10;  });&#10;  this.parameter('bridgeID', {&#10;	  type: &quot;string&quot;,&#10;	  value: &quot;Bridge1&quot;&#10;  });&#10;};&#10;&#10;/** Initialize the accessor.  Create a bridge object, connect to the bridge, and &#10; * initialize its state.&#10; */&#10;exports.initialize = function() {&#10;	// mockHueBridges.MockHueBridge is an object containing the results&#10;	// of a self-executing function.  This, in essence, creates a singleton&#10;	// object with a set of functions as its public API.&#10;	bridge = mockHueBridges.MockHueBridge;&#10;	connection = bridge.connect(this.get('bridgeID'));&#10;	connection.initializeToDefault();&#10;	&#10;	var self = this;&#10;	&#10;	/** React to a change in the bridge state by outputting the new state.  */&#10;	connection.on('change', function(data) {&#10;		self.send('state', data);&#10;	});&#10;  &#10;	// Register input handler&#10;	handle = this.addInputHandler('URI', inputHandler.bind(this));&#10;};&#10;&#10;/** Input HTTP request information and generate a response from the bridge.  */&#10;function inputHandler() {&#10;  var method = this.get('method').toString();&#10;  var uri = this.get('URI').toString();&#10;  var output;&#10;  &#10;  // Check if body exists.  If so, include the body in the command.&#10;  var body = this.get('body');&#10;  if (typeof body !== 'undefined') {&#10;	  output = connection.command(method, uri, body);&#10;  } else {&#10;	  output = connection.command(method, uri);&#10;  }&#10; &#10;  this.send('response', output);&#10;}&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    this.removeInputHandler(handle);&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/devices/MockHueBridge.js">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{985.0, 365.0}">
            </property>
            <property name="URI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="method" class="ptolemy.actor.parameters.PortParameter" value="POST">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="body" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="bridgeID" class="ptolemy.data.expr.Parameter" value="Bridge1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt; This accessor simulates selected features of a Hue light bridge.&lt;br&gt;It accepts commands in the form of http requests (URL and body), and &#10;simulates the output of a Hue light bridge.  The simulated bridge has&#10;two lights which all start in the off state with 0 for hue, saturation&#10;and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10;module.&lt;br&gt;&lt;/p&gt;&#10;&#10; &lt;p&gt; Some Hue examples are available here:&#10; http://www.developers.meethue.com/documentation/getting-started&#10; with the full API available here (free registration required):&#10; http://www.developers.meethue.com/philips-hue-api&#10; Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt; The following API requests are implemented.  Each request &#10; (other than GET /  and POST /api/) is checked for user authorization.&#10; Any new username registration request will be accepted.&#10;&#10; GET /&#10; Check if bridge is available.  Returns {available : true}. &#10;&#10; POST /api/&#10; Add a user to list of registered users, optionally specifying a username.&lt;br&gt; Body is of the form &#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;} &#10; to request a newly generated username, where &amp;quot;devicetype&amp;quot; is of the form&#10; &lt;application_name&gt;#&lt;devicename&gt;&#10; Add a &amp;quot;username&amp;quot; field to explicitly specify the username,&#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;peter&amp;quot;}&#10; Returns a list with a single item indicating success or failure, and the&#10; (possibly newly generated) username, e.g.:&#10; [{&amp;quot;success&amp;quot;:{&amp;quot;username&amp;quot;: &amp;quot;83b7780291a6ceffbe0bd049104df&amp;quot;}}]&#10;&#10; GET /api/&lt;username&gt;/&#10; Get entire datastore. &#10;&#10; GET /api/&lt;username&gt;/lights/&#10; GET information on all lights.&#10;&#10; GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; Get information about the light with id &lt;id&gt; .&#10;&#10; PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; Set the state of the light with id &lt;id&gt; .&#10;&#10; Other requests return {supported : false} .&#10; &lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$">
                </property>
                <property name="bridgeID (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The identifier of the bridge to access.  Can be &#10;   any string.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The response to be returned to the HTTP request.">
                </property>
                <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="The state of the bridge.  May include multiple lights.">
                </property>
                <property name="URI (port)" class="ptolemy.kernel.util.StringAttribute" value="The path of the request.">
                </property>
                <property name="method (port)" class="ptolemy.kernel.util.StringAttribute" value="The HTTP request method.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The body of the HTTP request, if any.">
                </property>
            </property>
            <port name="URI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="method" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="body" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="state" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
        </entity>
        <entity name="Const3" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;POST&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[875.0, 385.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay4" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1060.0, 180.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MockHueBridge" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &lt;p&gt; This accessor simulates selected features of a Hue light bridge.  &#10; * It accepts commands in the form of http requests (URL and body), and &#10; * simulates the output of a Hue light bridge.  The simulated bridge has&#10; * two lights which all start in the off state with 0 for hue, saturation&#10; * and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10; * module.  &#10; * &lt;/p&gt;&#10; * &#10; *  &lt;p&gt; Some Hue examples are available here:&#10; *  http://www.developers.meethue.com/documentation/getting-started&#10; *  with the full API available here (free registration required):&#10; *  http://www.developers.meethue.com/philips-hue-api&#10; *  Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; *  &lt;/p&gt;&#10; *  &#10; *  &lt;p&gt; The following API requests are implemented.  Each request &#10; *  (other than GET /  and POST /api/) is checked for user authorization.&#10; *  Any new username registration request will be accepted.&#10; *  &#10; *  GET /&#10; *  Check if bridge is available.  Returns {available : true}. &#10; *  &#10; *  POST /api/&#10; *  Add a user to list of registered users, optionally specifying a username.  &#10; *  Body is of the form &#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;} &#10; *  to request a newly generated username, where &quot;devicetype&quot; is of the form&#10; *  &lt;application_name&gt;#&lt;devicename&gt;&#10; *  Add a &quot;username&quot; field to explicitly specify the username,&#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;, &quot;username&quot;: &quot;peter&quot;}&#10; *  Returns a list with a single item indicating success or failure, and the&#10; *  (possibly newly generated) username, e.g.:&#10; *  [{&quot;success&quot;:{&quot;username&quot;: &quot;83b7780291a6ceffbe0bd049104df&quot;}}]&#10; *  &#10; *  GET /api/&lt;username&gt;/&#10; *  Get entire datastore. &#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&#10; *  GET information on all lights.&#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; *  Get information about the light with id &lt;id&gt; .&#10; *  &#10; *  PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; *  Set the state of the light with id &lt;id&gt; .&#10; *  &#10; *  Other requests return {supported : false} .&#10; *  &lt;/p&gt;&#10; * &#10; *  @accessor devices/MockHueBridge&#10; *  @input {string} URI The path of the request.  &#10; *  @input {string} method The HTTP request method.&#10; *  @input {JSON} body The body of the HTTP request, if any.&#10; *  @output {string} response The response to be returned to the HTTP request.&#10; *  @output {JSON} state The state of the bridge.  May include multiple lights.&#10; *  @parameter {string} bridgeID The identifier of the bridge to access.  Can be &#10; *    any string.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, input, output, parameter, send, removeInputHandler, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var mockHueBridges = require(&quot;mockHueBridges&quot;);&#10;var bridge;&#10;var connection;&#10;var handle;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  this.input('URI', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  this.input('method', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;GET&quot;&#10;  });&#10;  this.input('body', {&#10;	  type: &quot;JSON&quot;,&#10;	  value: &quot;&quot;&#10;  });&#10;  this.output('response', {&#10;	    type: &quot;string&quot;,&#10;	    value: &quot;&quot;&#10;	  });&#10;  this.output('state', {&#10;		  type: &quot;JSON&quot;,&#10;		  value: &quot;&quot;&#10;  });&#10;  this.parameter('bridgeID', {&#10;	  type: &quot;string&quot;,&#10;	  value: &quot;Bridge1&quot;&#10;  });&#10;};&#10;&#10;/** Initialize the accessor.  Create a bridge object, connect to the bridge, and &#10; * initialize its state.&#10; */&#10;exports.initialize = function() {&#10;	// mockHueBridges.MockHueBridge is an object containing the results&#10;	// of a self-executing function.  This, in essence, creates a singleton&#10;	// object with a set of functions as its public API.&#10;	bridge = mockHueBridges.MockHueBridge;&#10;	connection = bridge.connect(this.get('bridgeID'));&#10;	connection.initializeToDefault();&#10;	&#10;	var self = this;&#10;	&#10;	/** React to a change in the bridge state by outputting the new state.  */&#10;	connection.on('change', function(data) {&#10;		self.send('state', data);&#10;	});&#10;  &#10;	// Register input handler&#10;	handle = this.addInputHandler('URI', inputHandler.bind(this));&#10;};&#10;&#10;/** Input HTTP request information and generate a response from the bridge.  */&#10;function inputHandler() {&#10;  var method = this.get('method').toString();&#10;  var uri = this.get('URI').toString();&#10;  var output;&#10;  &#10;  // Check if body exists.  If so, include the body in the command.&#10;  var body = this.get('body');&#10;  if (typeof body !== 'undefined') {&#10;	  output = connection.command(method, uri, body);&#10;  } else {&#10;	  output = connection.command(method, uri);&#10;  }&#10; &#10;  this.send('response', output);&#10;}&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    this.removeInputHandler(handle);&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/devices/MockHueBridge.js">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[985.0, 285.0]">
            </property>
            <property name="URI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="method" class="ptolemy.actor.parameters.PortParameter" value="GET">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="body" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="bridgeID" class="ptolemy.data.expr.Parameter" value="Bridge1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt; This accessor simulates selected features of a Hue light bridge.&lt;br&gt;It accepts commands in the form of http requests (URL and body), and &#10;simulates the output of a Hue light bridge.  The simulated bridge has&#10;two lights which all start in the off state with 0 for hue, saturation&#10;and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10;module.&lt;br&gt;&lt;/p&gt;&#10;&#10; &lt;p&gt; Some Hue examples are available here:&#10; http://www.developers.meethue.com/documentation/getting-started&#10; with the full API available here (free registration required):&#10; http://www.developers.meethue.com/philips-hue-api&#10; Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt; The following API requests are implemented.  Each request &#10; (other than GET /  and POST /api/) is checked for user authorization.&#10; Any new username registration request will be accepted.&#10;&#10; GET /&#10; Check if bridge is available.  Returns {available : true}. &#10;&#10; POST /api/&#10; Add a user to list of registered users, optionally specifying a username.&lt;br&gt; Body is of the form &#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;} &#10; to request a newly generated username, where &amp;quot;devicetype&amp;quot; is of the form&#10; &lt;application_name&gt;#&lt;devicename&gt;&#10; Add a &amp;quot;username&amp;quot; field to explicitly specify the username,&#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;peter&amp;quot;}&#10; Returns a list with a single item indicating success or failure, and the&#10; (possibly newly generated) username, e.g.:&#10; [{&amp;quot;success&amp;quot;:{&amp;quot;username&amp;quot;: &amp;quot;83b7780291a6ceffbe0bd049104df&amp;quot;}}]&#10;&#10; GET /api/&lt;username&gt;/&#10; Get entire datastore. &#10;&#10; GET /api/&lt;username&gt;/lights/&#10; GET information on all lights.&#10;&#10; GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; Get information about the light with id &lt;id&gt; .&#10;&#10; PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; Set the state of the light with id &lt;id&gt; .&#10;&#10; Other requests return {supported : false} .&#10; &lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$">
                </property>
                <property name="bridgeID (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The identifier of the bridge to access.  Can be &#10;   any string.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The response to be returned to the HTTP request.">
                </property>
                <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="The state of the bridge.  May include multiple lights.">
                </property>
                <property name="URI (port)" class="ptolemy.kernel.util.StringAttribute" value="The path of the request.">
                </property>
                <property name="method (port)" class="ptolemy.kernel.util.StringAttribute" value="The HTTP request method.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The body of the HTTP request, if any.">
                </property>
            </property>
            <port name="URI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="method" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="body" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="state" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[640.0, 220.0]">
            </vertex>
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1020.0, 220.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[835.0, 275.0]">
            </vertex>
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[785.0, 400.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[970.4483947753906, 510.3916778564453]">
            </vertex>
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[775.0, 465.0]">
            </vertex>
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[685.4483947753906, 510.3916778564453]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="Auto">
            </property>
            <vertex name="vertex1" value="[1015.0, 450.0]">
            </vertex>
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation13" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[840.0, 355.0]">
            </vertex>
        </relation>
        <relation name="relation14" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation15" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1090.0, 355.0]">
            </vertex>
        </relation>
        <relation name="relation16" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[625.0, 180.0]">
            </vertex>
        </relation>
        <relation name="relation17" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="state" relation="relation2"/>
        <link port="HttpActor.response" relation="relation3"/>
        <link port="HttpActor.response" relation="relation11"/>
        <link port="HttpActor.response" relation="relation16"/>
        <link port="HttpActor.getRequestURI" relation="relation"/>
        <link port="HttpActor.postRequestURI" relation="relation13"/>
        <link port="HttpActor.postBody" relation="relation14"/>
        <link port="HttpActor.putRequestURI" relation="relation4"/>
        <link port="HttpActor.putBody" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation5"/>
        <link port="MicrostepDelay.output" relation="relation3"/>
        <link port="Const2.output" relation="relation17"/>
        <link port="Const2.trigger" relation="relation"/>
        <link port="Const.output" relation="relation12"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="MicrostepDelay2.input" relation="relation7"/>
        <link port="MicrostepDelay2.output" relation="relation11"/>
        <link port="MockHueBridge3.URI" relation="relation4"/>
        <link port="MockHueBridge3.method" relation="relation12"/>
        <link port="MockHueBridge3.body" relation="relation9"/>
        <link port="MockHueBridge3.response" relation="relation7"/>
        <link port="MockHueBridge3.state" relation="relation2"/>
        <link port="MockHueBridge2.URI" relation="relation13"/>
        <link port="MockHueBridge2.method" relation="relation8"/>
        <link port="MockHueBridge2.body" relation="relation14"/>
        <link port="MockHueBridge2.response" relation="relation15"/>
        <link port="Const3.output" relation="relation8"/>
        <link port="Const3.trigger" relation="relation13"/>
        <link port="MicrostepDelay4.input" relation="relation15"/>
        <link port="MicrostepDelay4.output" relation="relation16"/>
        <link port="MockHueBridge.URI" relation="relation"/>
        <link port="MockHueBridge.method" relation="relation17"/>
        <link port="MockHueBridge.response" relation="relation5"/>
    </entity>
    <entity name="Init" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 255.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={73, 127, 1056, 641}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{367.0, 266.29296875}">
        </property>
        <port name="ready" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[730.0, 60.0]">
            </property>
        </port>
        <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 50.0]">
            </property>
        </entity>
        <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
            <property name="init" class="ptolemy.actor.parameters.PortParameter" value="WebServer.getAttribute(&quot;deployedPort&quot;).getToken().intValue()">
            </property>
            <property name="step" class="ptolemy.actor.parameters.PortParameter" value="0">
            </property>
            <doc>Create a sequence of tokens with increasing value</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[195.0, 60.0]">
            </property>
        </entity>
        <entity name="SetVariable" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="port">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[275.0, 60.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;localhost:&quot; + port">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[410.0, 60.0]">
            </property>
            <port name="port" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="SetVariable2" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="bridgeIPAddress">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 60.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[680.0, 60.0]">
            </property>
        </entity>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="ready" relation="relation6"/>
        <link port="SingleEvent.output" relation="relation"/>
        <link port="Ramp.output" relation="relation2"/>
        <link port="Ramp.trigger" relation="relation"/>
        <link port="SetVariable.input" relation="relation2"/>
        <link port="SetVariable.output" relation="relation3"/>
        <link port="Expression.output" relation="relation4"/>
        <link port="Expression.port" relation="relation3"/>
        <link port="SetVariable2.input" relation="relation4"/>
        <link port="SetVariable2.output" relation="relation5"/>
        <link port="Const.output" relation="relation6"/>
        <link port="Const.trigger" relation="relation5"/>
    </entity>
    <entity name="HueGraphic" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[335.0, 330.0]">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="rgb output port type is set to String">
            </property>
            <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-135.0, 65.0]">
                <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="HSLtoRGB">
                </property>
                <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
                </property>
            </property>
        </property>
        <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Extract hue, bri, sat from mock Hue bridge's state output&#10;for the given light ID and normalize to range [0, 1].">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-70.0, 105.0]">
            </property>
        </property>
        <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Convert to RGB.&#10;The SVG viewer does not seem to handle the svg hsl() function?">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-65.0, 155.0]">
            </property>
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 76, 928, 641}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{287.658203125, 401.4361979166667}">
        </property>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-50.0, 240.0]">
            </property>
        </port>
        <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={644, 259, 216, 282}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[200, 222]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[420.0, 560.0]">
            </property>
        </entity>
        <entity name="ImageReader" class="ptolemy.actor.lib.image.ImageReader">
            <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="blank.gif">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 560.0]">
            </property>
        </entity>
        <entity name="ImageAnnotate" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor annotates an image provided at the _image_ input&#10; *  by rendering an SVG graphic overlaid on the image.&#10; *&#10; *  The _graphic_ input, if provided, gives an SVG specification of the graphic.&#10; *  Alternatively, if a _graphic_ input is not provided, or the _graphic_ input&#10; *  is empty, the _graphicURI_ input can provide a resource identifier for the graphic.&#10; *  This can be a URL or a local resource (a file) available on the host.&#10; *  Note that most hosts will restrict locations from which files can be read.&#10; *  Usually they will allow to read files in the directory where the swarmlet is located&#10; *  on the file system, or in a subdirectory of that directory.&#10; *  To read such a file, give a path relative to the location of the swarmlet.&#10; *&#10; *  The _translate_&#10; *  input can be used to shift the graphic in the X and Y directions,&#10; *  and the _rotate_ input can used to rotate the graphic.&#10; *&#10; *  The _options_ input can have the following fields:&#10; *  * __XOffset__: The horizontal offset for the graphic. If this is specified&#10; *    and a _translate_ input is also provided, the both offsets are applied.&#10; *  * __YOffset__: The vertical offset for the graphic. If this is specified&#10; *    and a _translate_ input is also provided, the both offsets are applied.&#10; *  &#10; *  @accessor image/ImageAnnotate&#10; *  @input image The image to annotate.&#10; *  @input graphic The location of an SVG graphic to overlay on the image.&#10; *  @input translate An offset to apply to the graphic, as two element array specifying&#10; *   horizontal and vertical offsets in pixels.&#10; *  @input options A JSON object specifying options.&#10; *  @output output The filtered image.&#10; *  @author Edward A. Lee&#10; *  @version $$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, getResource, input, output, removeInputHandler, require, send */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var imageFilters = require('imageFilters');&#10;&#10;exports.setup = function() {&#10;    this.input('image');&#10;    this.input('graphic', {'value':'', 'type':'string'});&#10;    this.input('graphicURI', {'value':'', 'type':'string'});&#10;    this.input('scale', {'value':1.0, 'type':'number'});&#10;    this.input('rotation', {'value':0.0, 'type':'number'});&#10;    this.input('translate');&#10;    this.input('options', {'value':'', 'type':'JSON'});&#10;    this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('image', function() {&#10;        var image = this.get('image');&#10;        var options = this.get('options');&#10;        if (!options) {&#10;            options = {};&#10;        }&#10;        &#10;        var scale = this.get('scale');&#10;        if (scale !== null) {&#10;            // Combine with scale options, if specified.&#10;            if (options.Scale) {&#10;                scale *= options.Scale;&#10;            }&#10;            options.Scale = scale;&#10;        }&#10;        &#10;        var rotation = this.get('rotation');&#10;        if (rotation !== null) {&#10;            // Combine with rotation options, if specified.&#10;            if (options.Rotation) {&#10;                rotation += options.Rotation;&#10;            }&#10;            options.Rotation = rotation;&#10;        }&#10;            &#10;        var translate = this.get('translate');&#10;        if (translate !== null &amp;&amp; translate[0] !== null &amp;&amp; translate[1] !== null) {&#10;            // Combine with offset options, if specified.&#10;            var xOffset = translate[0];&#10;            if (options.XOffset) {&#10;                xOffset += options.XOffset;&#10;            }&#10;            options.XOffset = xOffset;&#10;            &#10;            var yOffset = translate[1];&#10;            if (options.YOffset) {&#10;                yOffset += options.YOffset;&#10;            }&#10;            options.YOffset = yOffset;&#10;        }&#10;        var graphic = this.get('graphic');&#10;        if (graphic) {&#10;            options.Graphic = graphic;&#10;        } else {&#10;            var graphicURI = this.get('graphicURI');&#10;            if (graphicURI) {&#10;                // Second argument is a timeout.&#10;                options.Graphic = this.getResource(graphicURI, 3000);&#10;            }&#10;        }&#10;        var result = imageFilters.filter(image, 'Annotate', options);&#10;        this.send('output', result);&#10;    });&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/image/ImageAnnotate.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor annotates an image provided at the &lt;em&gt;image&lt;/em&gt; input&#10; by rendering an SVG graphic overlaid on the image.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;graphic&lt;/em&gt; input, if provided, gives an SVG specification of the graphic.&#10; Alternatively, if a &lt;em&gt;graphic&lt;/em&gt; input is not provided, or the &lt;em&gt;graphic&lt;/em&gt; input&#10; is empty, the &lt;em&gt;graphicURI&lt;/em&gt; input can provide a resource identifier for the graphic.&#10; This can be a URL or a local resource (a file) available on the host.&#10; Note that most hosts will restrict locations from which files can be read.&#10; Usually they will allow to read files in the directory where the swarmlet is located&#10; on the file system, or in a subdirectory of that directory.&#10; To read such a file, give a path relative to the location of the swarmlet.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;translate&lt;/em&gt;&#10; input can be used to shift the graphic in the X and Y directions,&#10; and the &lt;em&gt;rotate&lt;/em&gt; input can used to rotate the graphic.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;options&lt;/em&gt; input can have the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;strong&gt;XOffset&lt;/strong&gt;: The horizontal offset for the graphic. If this is specified&#10;and a &lt;em&gt;translate&lt;/em&gt; input is also provided, the both offsets are applied.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;YOffset&lt;/strong&gt;: The vertical offset for the graphic. If this is specified&#10;and a &lt;em&gt;translate&lt;/em&gt; input is also provided, the both offsets are applied.&lt;/li&gt;&#10;&lt;/ul&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$">
                </property>
                <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="The image to annotate.">
                </property>
                <property name="graphic (port)" class="ptolemy.kernel.util.StringAttribute" value="The location of an SVG graphic to overlay on the image.">
                </property>
                <property name="translate (port)" class="ptolemy.kernel.util.StringAttribute" value="An offset to apply to the graphic, as two element array specifying&#10;  horizontal and vertical offsets in pixels.">
                </property>
                <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="A JSON object specifying options.">
                </property>
                <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The filtered image.">
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="graphic" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="graphicURI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[310.0, 560.0]">
            </property>
            <port name="graphic" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="graphicURI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="image" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="scale" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
            </port>
            <port name="rotation" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
            </port>
            <port name="translate" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="HSLtoRGB" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// From W3C CSS Color Module Recommendation algorithm in section 4.2.4&#10;// http://www.w3.org/TR/css3-color/#hsl-color&#10;&#10;exports.fire = function() {&#10;	this.send('rgb', hslToRgb(this.get('hue'), this.get('saturation'), this.get('brightness')));&#10;}&#10;&#10;// Assumes hue, saturation, lightness in range of 0 to 1&#10;function hslToRgb(h, s, l) {&#10;	// For some reason, h, s, and l are typed as strings by default&#10;	h = parseFloat(h);&#10;	s = parseFloat(s);&#10;	l = parseFloat(l);&#10;   var m1, m2, r, g, b;&#10;   if (l&lt;=0.5) {&#10;   	m2 = l*(s+1.0);&#10;   } else {&#10;   	m2 = l+s-l*s;&#10;   }&#10;   m1 = l*2-m2;&#10;   r = hueToRgb(m1, m2, h+1.0/3.0);&#10;   g = hueToRgb(m1, m2, h    );&#10;   b = hueToRgb(m1, m2, h-1.0/3.0);&#10;   var result = &quot;rgb(&quot; + Math.round(r*255) + &quot;,&quot; + Math.round(g*255) + &quot;,&quot; + Math.round(b*255) + &quot;)&quot;;&#10;   return result;&#10;}&#10;&#10;function hueToRgb(m1, m2, h) {&#10;   if (h&lt;0) { h = h+1.0; }&#10;   if (h&gt;1.0) { h = h-1.0; }&#10;   if (h*6.0&lt;1.0) { return m1+(m2-m1)*h*6.0; }&#10;   if (h*2.0&lt;1.0) { return m2; }&#10;   if (h*3.0&lt;2.0) { return m1+(m2-m1)*(2.0/3.0-h)*6.0; }&#10;   return m1;&#10;}">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[280.0, 240.0]">
            </property>
            <port name="rgb" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="brightness" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="hue" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="saturation" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;&lt;svg width=\&quot;200\&quot; height=\&quot;200\&quot;&gt;&#10;  &lt;path d=\&quot; M 90 177&#10;            L 83 170&#10;            L 83 145&#10;            L 76 140&#10;	    L 64 63&#10;	    L 141 63&#10;            L 130 140&#10;            L 124 145&#10;	    L 123 170&#10;	    L 116 177&#10;	    L 90 177\&quot;&#10;            stroke=\&quot;#808080\&quot; stroke-width=\&quot;4\&quot; fill=\&quot;lightgrey\&quot; /&gt;&#10;  &lt;path d=\&quot; M 83 170&#10;            L 123 170\&quot;&#10;            stroke=\&quot;#808080\&quot; stroke-width=\&quot;4\&quot; /&gt;&#10;  &lt;path d=\&quot; M 83 160&#10;            L 123 160\&quot;&#10;            stroke=\&quot;#808080\&quot; stroke-width=\&quot;4\&quot; /&gt;&#10;  &lt;path d=\&quot; M 83 150&#10;            L 123 150\&quot;&#10;            stroke=\&quot;#808080\&quot; stroke-width=\&quot;4\&quot; /&gt;&#10;    &lt;path d=\&quot; M 64 63&#10;            L 54 31&#10;	    S 103 13 152 31&#10;            L 141 63\&quot; &#10;	    stroke=\&quot;#808080\&quot; stroke-width=\&quot;4\&quot; fill=\&quot;&quot; + rgb + &quot;\&quot; /&gt;&#10;&lt;/svg&gt;&quot;">
                <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                    <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                    </property>
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 425.0]">
            </property>
            <port name="rgb" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use this.get(parameterName, channel) to read inputs.&#10;// Send to output ports using this.send(value, portName, channel).&#10;&#10;exports.initialize = function() {&#10;	this.input('input');&#10;	this.parameter('lightID');&#10;	this.output('bri');&#10;	this.output('hue');&#10;	this.output('sat');&#10;}&#10;&#10;exports.fire = function() {&#10;	// Somehow the MockHueBridge accessor's state output &#10;	// appears to be stringified twice?&#10;	var state = JSON.parse(JSON.parse(this.get('input')));&#10;	var lightID = this.get('lightID');&#10;	if (typeof state.lights[lightID] != 'undefined') {&#10;		// Normalize to range [0,1]&#10;		this.send('bri', state.lights[lightID].state.bri / 255.0);  &#10;		this.send('hue', state.lights[lightID].state.hue / 62580.0) ;  &#10;		this.send('sat', state.lights[lightID].state.sat / 255.0);  &#10;	}&#10;}">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 240.0]">
            </property>
            <property name="lightID" class="ptolemy.data.expr.Parameter" value="1">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="bri" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="hue" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="sat" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
        </entity>
        <entity name="TokenToJSON" class="ptolemy.actor.lib.conversions.json.TokenToJSON">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 240.0]">
            </property>
        </entity>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[-55.0, 290.0]">
            </vertex>
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="state" relation="relation10"/>
        <link port="ImageDisplay.input" relation="relation3"/>
        <link port="ImageReader.output" relation="relation2"/>
        <link port="ImageReader.trigger" relation="relation8"/>
        <link port="ImageAnnotate.graphic" relation="relation7"/>
        <link port="ImageAnnotate.image" relation="relation2"/>
        <link port="ImageAnnotate.output" relation="relation3"/>
        <link port="HSLtoRGB.rgb" relation="relation8"/>
        <link port="HSLtoRGB.brightness" relation="relation"/>
        <link port="HSLtoRGB.hue" relation="relation4"/>
        <link port="HSLtoRGB.saturation" relation="relation5"/>
        <link port="Expression.output" relation="relation7"/>
        <link port="Expression.rgb" relation="relation8"/>
        <link port="JavaScript.input" relation="relation9"/>
        <link port="JavaScript.bri" relation="relation"/>
        <link port="JavaScript.hue" relation="relation4"/>
        <link port="JavaScript.sat" relation="relation5"/>
        <link port="TokenToJSON.input" relation="relation10"/>
        <link port="TokenToJSON.output" relation="relation9"/>
    </entity>
    <entity name="Clock" class="ptolemy.actor.lib.Clock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="13">
        </property>
        <property name="offsets" class="ptolemy.data.expr.Parameter" value="{5, 10, 12}">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{24000, 10500, 1}">
        </property>
        <doc>Create a set of pulses</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 175.0]">
        </property>
    </entity>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &#10; *  It sets the parameters of the specified light according to the input values.&#10; *  &#10; *  IP Address input:  Hue checks the value of the &quot;bridgeIPAddress&quot; input in &#10; *  initialize().  If a default value is present, Hue initiates a connection to &#10; *  the bridge.  Otherwise, Hue waits for an IP address input to arrive.  &#10; *  Note that no commands can be sent until after an IP address has been given.  &#10; *  The &quot;trigger&quot; input is not enabled until after the Hue has connected to the&#10; *  bridge and verified that the user is authorized.&#10; *  &#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;. &#10; *  If there is no such user on the bridge, the script registers such a user and&#10; *  requests (via an alert dialog) that the link button on the bridge be pushed &#10; *  to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  If it fails to reach the bridge, it will try again a few times before giving up.&#10; *  &#10; *  Verifying the light: The final initialization step is to get a list of accessible lights.&#10; *  If the input light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; *  and may be valid in the future. Rather than terminating the model, we hope&#10; *  that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input {string} bridgeIPAddress The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @input {int} trigger Triggers a PUT request with all the light settings. Can be any type.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk (contributor) &#10; *  @version $$Id: MockHueBridge.xml 74581 2016-03-04 15:26:18Z beth@berkeley.edu $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.  &#10; *  The intiialize() function should call Hue() and save the returned hue object.&#10; *  This will create an object with its own local state, allowing multiple &#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *  &#10; *  An instance of the returned hue object implements the following public functions:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; connect(): Contact the bridge and register the user, if needed.  Add an&#10; *        input handler to the trigger input to submit commands to the bridge.&#10; *  &lt;/ul&gt;&#10; * &#10; */&#10;&#10;function Hue() {&#10;	var hue = {};&#10;	&#10;	// Public variables. &#10;	hue.changedLights = [];&#10;	hue.reachableLights = [];&#10;	&#10;	// Private variables.&#10;	var handleRegisterUser;&#10;	var handlers = [];&#10;	var ipAddress = &quot;&quot;;&#10;	var maxRetries = 5;&#10;	var registerInterval = 2000;&#10;	var registerTimeout = 20000;&#10;	var registerAttempts = 0;&#10;	var retryCount = 0;&#10;	var retryTimeout = 1000;&#10;	var strReachableLights = &quot;&quot;;&#10;	var timeout = 3000;&#10;	var url = &quot;&quot;;&#10;	var userName = &quot;&quot;;&#10;	&#10;	// Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;	// on each function call.&#10;	var self = this;&#10;	&#10;	// Public functions. &#10;	// Available to be used for e.g. inputHandlers.&#10;	&#10;	/** Contact the bridge and register the user, if needed.  Add an input &#10;	 * handler to the trigger input to submit commands to the bridge.&#10;	 */&#10;	hue.connect = function() {&#10;        ipAddress = self.get('bridgeIPAddress');&#10;        userName = self.getParameter('userName');&#10;&#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/&quot;;&#10;        &#10;        contactBridge();&#10;	};&#10;&#10;	// Private functions.&#10;	&#10;	/** Handle an error. This will report it on the console and then retry a &#10;	 * fixed number of times before giving up.  A retry is a re-invocation of &#10;	 * registerUser().&#10;	 */&#10;	function bridgeRequestErrorHandler(err) {&#10;		&#10;	    // FIXME: We should do a UPnP discovery here and find a bridge.&#10;	    // Could not connect to the bridge&#10;	    console.log('Error connecting to Hue basestation.');&#10;	    console.error(err);&#10;	    if (retryCount &lt; maxRetries) {&#10;	        console.log('Will retry');&#10;	        retryCount++;&#10;	        setTimeout(function() {&#10;	            contactBridge;&#10;	        }, retrryTimeout);&#10;	    } else {&#10;	        self.error('Could not reach the Hue basestation at ' + url +&#10;	                ' after ' + retryCount + ' attempts.');&#10;	    }&#10;	}&#10;	&#10;	/** Contact the bridge to ensure it is operating.  Register the user, if&#10;	 * needed.&#10;	 */&#10;	function contactBridge() {&#10;        var bridgeRequest = http.get(url, function (response) {&#10;        	if (response !== null) {&#10;        	    // NOTE: null response is handled by the error handler registered below.&#10;    	        if (response.statusCode != 200) {&#10;    	            // Response is other than OK.&#10;    	            bridgeRequestErrorHandler(response.statusMessage);&#10;    	        } else {&#10;    	            // Contacting the bridge succeeded. Next step is validating that the&#10;    	            // provided username is valid.&#10;    	            url = url + &quot;api/&quot;;&#10;    	            http.get(url + userName + '/', function (response) {&#10;    	            	if (response !== null) {&#10;    		                if (response.statusCode == 200) {&#10;    		                    var lights = JSON.parse(response.body);&#10;    		&#10;    		                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;    		                        var description = lights[0].error.description;&#10;    		&#10;    		                        if (description.match(&quot;unauthorized user&quot;)) {&#10;    		                            // Add this user.&#10;    		                            self.error(userName + &quot; is not a registered user.\n&quot; +&#10;    		                                        &quot; Push the link button on the Hue bridge to register.&quot;);&#10;    		                            &#10;    		                            handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;    		                        } else {&#10;    		                            console.error('Error occurred when trying to get Hue light status.');&#10;    		                            self.error(description);&#10;    		                        }&#10;    		                    } else if (lights.lights) {&#10;    		                        // Proceed to next stage of initialization.&#10;    		                        getReachableLights();&#10;    		                    } else {&#10;    		                        self.error(&quot;Unknown error. Could not authorize user.&quot;);&#10;    		                    }&#10;    		                } else {&#10;    		                    self.error('Error with HTTP GET for lights status. Code: ' + response.statusCode);&#10;    		                }&#10;    	            	}&#10;    	            	// TODO:  Test this - how?&#10;                    }).on('error', bridgeRequestErrorHandler);&#10;    	        }&#10;        	}&#10;        });&#10;        // TODO:  Test this - how?&#10;        bridgeRequest.on('error', bridgeRequestErrorHandler);&#10;	}&#10;	&#10;	/** This function is only called after user has been registered.&#10;	 * Get and remember reachable lights.  Add an input handler to the &#10;	 * trigger input - the user may now submit commands to the bridge.&#10;	 */&#10;	function getReachableLights() {&#10;		url = url + userName + &quot;/&quot; + &quot;lights/&quot;;&#10;	    http.get(url, function (response) {&#10;	        if (response.statusCode == 200) {&#10;	            var lights = JSON.parse(response.body);&#10;	            for (var id in lights) {&#10;	                if (lights[id].state.reachable) {&#10;	                    hue.reachableLights.push(id);&#10;	                    console.log('Reachable bulb ID: ' + id);&#10;	                }&#10;	            }&#10;	        }&#10;	        &#10;	        // Input handler added after reachable lights have been determined,&#10;	        // even if request returns an error (i.e. no reachable lights).&#10;	        self.addInputHandler('trigger', inputHandler);&#10;	    });&#10;	 &#10;	}&#10;	&#10;	/** Get light settings from inputs and issue a command to the bridge. */&#10;	function inputHandler() {&#10;	    // Check if light is reachable.&#10;	    var lightID = self.get('lightID').toString();&#10;	    if (hue.reachableLights.indexOf(lightID) == -1) {&#10;	        console.log('Light ' + lightID + ' may not be reachable.');&#10;	    }&#10;	    // Keep track of changed lights to turn off during wrap up.&#10;	    if (hue.changedLights.indexOf(lightID) == -1) {&#10;	        hue.changedLights.push(lightID);&#10;	    }&#10;&#10;	    // Get inputs and send command to light.&#10;	    var command = {&#10;	        on: self.get('on') === true,&#10;	        bri: limit(self.get('brightness'), 0, 255),&#10;	        hue: limit(self.get('hue'), 0, 65280),&#10;	        sat: limit(self.get('saturation'), 0, 255),&#10;	        transitiontime: limit(self.get('transitionTime'), 0, 65535)&#10;	    };&#10;&#10;	    var cmd = JSON.stringify(command);&#10;	    var options = {&#10;	    		body : cmd,&#10;	    		timeout : 10000,&#10;	    		url : url + lightID + &quot;/state/&quot;&#10;	    };&#10;	    &#10;	    http.put(options, function(response) {&#10;	    	console.log(JSON.stringify(response));&#10;	        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;	            self.error(&quot;Server responds with error: &quot; + &#10;	            		response[0].error.description);&#10;	        } &#10;	    });&#10;	}&#10;	&#10;	/** Utility function to check that an object is a nonempty array.&#10;	 *  @param obj The object.&#10;	 */&#10;	function isNonEmptyArray(obj) {&#10;	    return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;	}&#10;&#10;	/** Utility function to limit the range of a number&#10;	 *  and to force it to be an integer. If the value argument&#10;	 *  is a string, then it will be converted to a Number.&#10;	 *  @param value The value to limit.&#10;	 *  @param low The low value.&#10;	 *  @param high The high value.&#10;	 */&#10;	function limit(value, low, high) {&#10;	    var parsed = parseInt(value);&#10;	    if (!parsed) {&#10;	        self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;	        return 0;&#10;	    }&#10;	    if (parsed &lt; low) {&#10;	        return low;&#10;	    } else if (parsed &gt; high) {&#10;	        return high;&#10;	    } else {&#10;	        return parsed;&#10;	    }&#10;	}&#10;	&#10;	/** Register a new user.&#10;	 *  This function repeats at registerInterval until registration is&#10;	 *  successful, or until registerTimeout.&#10;	 *  It does so because it needs to wait until the user clicks&#10;	 *  the button on the Hue bridge.&#10;	 */&#10;&#10;	function registerUser() {&#10;&#10;		var registerData = {&#10;			devicetype : userName,&#10;			username : userName&#10;		};&#10;	    var options = {&#10;	    		body : JSON.stringify(registerData),&#10;	    		timeout: 10000,&#10;	    		url : url&#10;	    };&#10;	    &#10;	    http.post(options, function(response) {&#10;			console.log('Request: ' + JSON.stringify(options) + '\nResponse: ' + JSON.stringify(response));&#10;	        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;	            var description = response[0].error.description;&#10;&#10;	            if (description.match(&quot;link button not pressed&quot;)) {&#10;	                //repeat registration attempt unless registerTimeout has been reached.&#10;	                console.log('link button');&#10;	                registerAttempts++;&#10;	                if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;	                    throw &quot;Failed to create user after &quot; + registerTimeout/1000 +&#10;	                        &quot;s.&quot;;&#10;	                }&#10;	                handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;	                return;&#10;	            } else {&#10;	                throw description;&#10;	            }&#10;	        } else if ((isNonEmptyArray(response) &amp;&amp; response[0].success) || &#10;	        		JSON.parse(response.body)[0].success) {&#10;	        		&#10;	            //registration is successful - proceed to next stage of initialization.&#10;	            if (handleRegisterUser !== null) {&#10;	                clearTimeout(handleRegisterUser);&#10;	            }&#10;&#10;	            getReachableLights();&#10;	        } else {&#10;	        	console.log(&quot;Response &quot; + JSON.stringify(response));&#10;	        	console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;	            throw &quot;Error registering new user&quot;;&#10;	        }&#10;	    });&#10;	}&#10;	&#10;	return hue;&#10;};&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    this.input('bridgeIPAddress', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.input('lightID', {&#10;        type: &quot;int&quot;,&#10;        value: 1&#10;    });&#10;    this.input('brightness', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    this.input('hue', {&#10;        type: &quot;number&quot;,&#10;        value: 65280&#10;    });&#10;    this.input('saturation', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    this.input('on', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.input('transitionTime', {&#10;        type: &quot;int&quot;,&#10;        value: 4&#10;    });&#10;    this.input('trigger');&#10;    &#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables &#10;    // while providing access to accessor functions.  &#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;};&#10;&#10;/** Upon receipt of a bridge IP address, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.  &#10; */&#10;&#10;exports.initialize = function() {&#10;	this.addInputHandler('bridgeIPAddress', this.hue.connect);&#10;	&#10;	// Check to see if a default input value for bridgeIPAddress is present.&#10;	// If so, 'send' this to the bridgeIPAddress input to trigger handler.&#10;	// This way, models that use a static IP address do not need to add extra&#10;	// actors to send the bridgeIPAddress.&#10;	if (this.get('bridgeIPAddress') != null &amp;&amp; this.get('bridgeIPAddress') != &quot;&quot;) {&#10;		send('bridgeIPAddress', this.get('bridgeIPAddress'));&#10;	} &#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = { };&#10;    &#10;    for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;        options = {&#10;            body : cmd,&#10;            timeout : 10000, &#10;            url : &quot;http://&quot; + this.get(&quot;bridgeIPAddress&quot;) + &quot;/api/&quot; + &#10;            	getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] + &#10;            	&quot;/state/&quot;&#10;        };&#10;        &#10;        var self = this;&#10;        &#10;        http.put(options, function(response) {&#10;        	console.log(JSON.stringify(response));&#10;            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;                var lightID = self.get('lightID').toString();&#10;                errorLights.push(lightID);&#10;            }&#10;        });&#10;    }&#10;&#10;    if (errorLights.length !== 0) {&#10;        error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[545.0, 205.0]">
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="ptolemyuser">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="brightness" class="ptolemy.actor.parameters.PortParameter" value="120">
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="bridgeIPAddress">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[370.0, 255.0]">
        </property>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[365.0, 175.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Service.state" relation="relation"/>
    <link port="Init.ready" relation="relation2"/>
    <link port="HueGraphic.state" relation="relation"/>
    <link port="Clock.output" relation="relation3"/>
    <link port="Hue.hue" relation="relation3"/>
    <link port="Hue.bridgeIPAddress" relation="relation4"/>
    <link port="Hue.trigger" relation="relation3"/>
    <link port="Const.output" relation="relation4"/>
    <link port="Const.trigger" relation="relation2"/>
</entity>
