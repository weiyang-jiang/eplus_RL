<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Scarab" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{70.0, 30.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 100, 1430, 653}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1196, 543]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.2982889398482977">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{471.75502717391305, 209.45181725543475}">
    </property>
    <property name="ScarabIP" class="ptolemy.data.expr.StringParameter" value="192.168.0.111">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{275.0, 10.0}">
        </property>
    </property>
    <property name="ScarabPort" class="ptolemy.data.expr.Parameter" value="9090">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{145.0, 10.0}">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo constructs a motion command for a Scarab robot&#10;from images taken from a camera. Specifically, the amount of&#10;motion depends on the amount of motion (percentage of pixels&#10;in the frame that change), and the direction of turning depends&#10;on the center of gravity of the motion. If the motion is in the&#10;center of the image, the robot does not turn. If the motion is&#10;to one side or the other, the robot turns.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[35.0, 270.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.0,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo requires a Scarab robot to be&#10;visible at the specified IP address and port.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[490.0, 265.0]">
        </property>
    </property>
    <entity name="Scarab" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor exposes a subset of commands and sensor data&#10; *  for a type of robot called a &quot;Scarab&quot; created by Prof. Vijay Kumar's&#10; *  group at the University of Pennsylvannia (see [1]).&#10; *  This accessor communicates with the robot through a websocket connection&#10; *  to ROS, the Robotic Operating System, using a websocket interface&#10; *  for ROS called ROSBridge.&#10; *&#10; *  This accessor requires very specific hardware. In the usual configuration,&#10; *  the ROS core and ROS bridge are executed on a SwarmBox, and robot itself&#10; *  operates as a ROS client.  The ROS bridge provides a websocket that can&#10; *  be used to publish and subscribe to ROS events.&#10; *&#10; *  Following are instructions for running this accessor in the DOP Center&#10; *  setup at Berkeley:&#10; *&#10; *  1. Get your laptop on the SwarmMaster network, hosted by a SwarmBox.&#10; *  2. Connect to the Swarmbox using ssh.  E.g.:&#10; *        ssh -l sbuser 192.168.0.111&#10; *     You will need a password.&#10; *  3. Start screen on the swarmbox:&#10; *        screen&#10; *  4. Run the ROS core:&#10; *        roscore&#10; *  5. Create a new &quot;window&quot; in screen:&#10; *        Ctrl-A C&#10; *  6. Run the ROS bridge:&#10; *        roslaunch rosbridge_server rosbridge_websocket.launch&#10; *  7. Detach from screen:&#10; *        Ctrl-A D&#10; *&#10; *&#10; *  ROSBridge on Swarmbox will be running at IP 192.168.0.111, port 9090.&#10; *&#10; *  You can now log off from the swarmbox.  To stop the ROS core and bridge&#10; *  on the SwarmBox later, you can:&#10; *&#10; *  1. Connect to the Swarmbox using ssh, as above.&#10; *  2. Resume screen on the swarmbox:&#10; *        screen -r&#10; *  3. Stop the program:&#10; *        Ctrl-C&#10; *  4. End the &quot;window&quot;:&#10; *        Ctrl-D&#10; *  5. Repeat for all screen windows.&#10; *&#10; *&#10; *  Next, set up the robot. The DOP center robot is Lucy, and the ROS prefix&#10; *  for pub/sub is &quot;/scarab/lucy&quot;.&#10; *&#10; *  1. Power on the robot (all switches and one push button).&#10; *  2. Find the robot's IP address. You can use the Discovery swarmlet or&#10; *     command-line tools. The DOP center robot Lucy has mac address&#10; *     &quot;4:f0:21:3:6:9&quot;.&#10; *  3. Connect to the robot using ssh: e.g., assuming the IP address is 192.168.0.105,&#10; *        ssh 192.168.0.105 -l terraswarm&#10; *  4. Enter the password.&#10; *  5. Start screen:&#10; *        screen&#10; *  6. Tell the robot it's IP address:&#10; *        export ROS_IP=192.168.0.105&#10; *  7. Launch the ROS client:&#10; *        roslaunch scarab dop.launch robot:=lucy map_file:=dop.yaml&#10; *  8. Detach from screen and log off (if you like):&#10; *       Ctrl-A D&#10; *&#10; *&#10; *  References&#10; *  ----------&#10; *&#10; *  1. Nathan Michael, Michael M. Zavlanos, Vijay Kumar, and George J. Pappas,&#10; *     Distributed Multi-Robot Task Assignment and Formation Control,&#10; *     IEEE International Conference on Robotics and Automation (ICRA),&#10; *     Pasadena, CA, USA, May 19-23, 2008.&#10; *     DOI: 10.1109/ROBOT.2008.4543197&#10; *&#10; *  @accessor robotics/Scarab&#10; *  @input {array&lt;{position: {x: 0, y: 0, z: 0}, orientation: {x: 0, y: 0, z: 0, w: 0}}&gt;} pose&#10; *   Send the robot to a location with a given orientation,&#10; *   where orientation is a quaternion.&#10; *  @input {array&lt;{linear: {x: 0, y: 0, z: 0}, angular: {x: 0, y: 0, z: 0}}&gt;} cmdvel&#10; *   Low-level control for the wheel motors. &#10; *   To drive the robot straight forward and backward, set the linear.x property&#10; *   to a value between -1.0 (backwards) and 1.0 (forwards). To turn the robot,&#10; *   set the angular.z property to a value between -1.0 and 1.0. Both can be&#10; *   to steer the robot while it drives forward or backward. The other properties&#10; *   are ignored. Note that this interface is not recommended for normal&#10; *   operation. In the general case, only `pose` should be used to direct the&#10; *   robot.&#10; *  @input cancel Upon receiving any message, cancel the robot's current&#10; *   navigation goal. This will cause the robot to stop.&#10; *&#10; *  @output battery The percentage of battery remaining.&#10; *  @output state The current state of the robot's navigation algorithm. It can&#10; *   be one of 'idle', 'navigating', or 'stuck'. If the robot is 'idle' it&#10; *   is currently not trying to navigate to any pose. In 'navigating' state,&#10; *   the robot is actively trying to reach a desired pose goal. If the robot&#10; *   is unable to find a path to the goal (beacuse there were obsticals in the&#10; *   way), it will enter the 'stuck' state.&#10; *  @output location The &quot;pose&quot; type of where the robot currently is. See the&#10; *   input &quot;pose&quot; for a description of the format.&#10; *&#10; *  @parameter server The IP address of the ROS bridge, e.g. '192.168.0.111'.&#10; *  @parameter port The port used by the ROS bridge web socket, e.g. 9090.&#10; *  @parameter topicPrefix The identifier for the robot, e.g. '/scarab/lucy'.&#10; *&#10; *  @author Brad Campbell, Pat Pannuto. Contributor: Edward A. Lee&#10; *  @version $$Id: Scarab.xml 74585 2016-03-05 00:05:16Z cxh $$&#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function() {&#10;&#10;	this.input('pose');&#10;	this.input('cmdvel');&#10;	this.input('cancel');&#10;&#10;	this.output('battery', {&#10;		type: 'int'&#10;	});&#10;	this.output('state', {&#10;		type: 'string'&#10;	});&#10;	this.output('location');&#10;&#10;	this.parameter('server', {&#10;		type: 'string',&#10;		value: 'localhost'&#10;	});&#10;	this.parameter('port', {&#10;		type: 'int',&#10;		value: 8080&#10;	});&#10;	this.parameter('topicPrefix', {&#10;		type: 'string',&#10;		value: '/scarab/lucy'&#10;	});&#10;}&#10;&#10;var batteryClient = null;&#10;var stateClient = null;&#10;var locationClient = null;&#10;var poseClient = null;&#10;var cmdvelClient = null;&#10;var cancelClient = null;&#10;&#10;var seq = 0;&#10;&#10;/** Initialize the accessor by attaching functions to inputs&#10; *  and opening web socket connections to RosBridge.&#10; */&#10;exports.initialize = function() {&#10;&#10;	var self = this;&#10;&#10;	// Retreive the current battery charge status&#10;	batteryClient = new WebSocket.Client({&#10;		host: self.getParameter('server'),&#10;		port: self.getParameter('port')&#10;	});&#10;	batteryClient.on('open', function () {&#10;		// Subscribe to /scarab/name/diagnostics&#10;		batteryClient.send({&#10;			op: &quot;subscribe&quot;,&#10;			topic: self.getParameter('topicPrefix') + '/diagnostics'&#10;		});&#10;	});&#10;	batteryClient.on('message', function (msg) {&#10;		// Quick hack to find the charge of the battery.&#10;		// Ideally this would be done in some better way, but this is all we&#10;		// need for now.&#10;		s = msg.msg.status[1].message;&#10;		charge = parseInt(s.substr(0, s.indexOf('%')));&#10;		if (!isNaN(charge)) {&#10;			self.send('battery', charge);&#10;		}&#10;	});&#10;	batteryClient.on('error', function(message) {&#10;		error(message)&#10;	});&#10;	batteryClient.open();&#10;&#10;	// Keep track of what the robot is doing&#10;	stateClient = new WebSocket.Client({&#10;		host: self.getParameter('server'),&#10;		port: self.getParameter('port')&#10;	});&#10;	stateClient.on('open', function () {&#10;		// Subscribe to /scarab/name/diagnostics&#10;		stateClient.send({&#10;			op: &quot;subscribe&quot;,&#10;			topic: self.getParameter('topicPrefix') + '/state'&#10;		});&#10;	});&#10;	stateClient.on('message', function (msg) {&#10;		// one of: IDLE, BUSY, STUCK, FAILED&#10;		self.send('state', msg.msg.state);&#10;	});&#10;	stateClient.on('error', function(message) {&#10;		error(message)&#10;	});&#10;	stateClient.open();&#10;&#10;	// Get location updates from the robot&#10;	locationClient = new WebSocket.Client({&#10;		host: self.getParameter('server'),&#10;		port: self.getParameter('port')&#10;	});&#10;	locationClient.on('open', function () {&#10;		// Subscribe to /scarab/name/pose&#10;		locationClient.send({&#10;			op: &quot;subscribe&quot;,&#10;			topic: self.getParameter('topicPrefix') + '/pose'&#10;		});&#10;	});&#10;	locationClient.on('message', function (msg) {&#10;		self.send('location', msg.msg.pose);&#10;	});&#10;	locationClient.on('error', function(message) {&#10;		error(message)&#10;	});&#10;	locationClient.open();&#10;&#10;	// Send poses to the robot&#10;	poseClient = new WebSocket.Client({&#10;		host: self.getParameter('server'),&#10;		port: self.getParameter('port')&#10;	});&#10;	poseClient.on('open', function () {&#10;		poseClient.send({&#10;			op: 'advertise',&#10;			topic: self.getParameter('topicPrefix') + '/goal',&#10;			type: 'geometry_msgs/PoseStamped'&#10;		});&#10;	});&#10;	poseClient.on('error', function(message) {&#10;		error(message)&#10;	});&#10;	self.addInputHandler('pose', pose_in.bind(self));&#10;	poseClient.open();&#10;&#10;	// Send cmd_vel to the robot&#10;	cmdvelClient = new WebSocket.Client({&#10;		host: self.getParameter('server'),&#10;		port: self.getParameter('port')&#10;	});&#10;	cmdvelClient.on('open', function () {&#10;		var advertise = {&#10;				op: 'advertise',&#10;				topic: self.getParameter('topicPrefix') + '/cmd_vel',&#10;				type: 'geometry_msgs/Twist'&#10;		};&#10;		cmdvelClient.send(advertise);&#10;		console.log('Sending over socket: ' + JSON.stringify(advertise));&#10;	});&#10;	cmdvelClient.on('error', function(message) {&#10;		error(message)&#10;	});&#10;	self.addInputHandler('cmdvel', cmdvel_in.bind(self));&#10;	cmdvelClient.open();&#10;&#10;	// Send cancel to the robot&#10;	cancelClient = new WebSocket.Client({&#10;		host: self.getParameter('server'),&#10;		port: self.getParameter('port')&#10;	});&#10;	cancelClient.on('open', function () {&#10;		cancelClient.send({&#10;			op: 'advertise',&#10;			topic: self.getParameter('topicPrefix') + '/cancel',&#10;			type: 'std_msgs/Empty'&#10;		});&#10;	});&#10;	cancelClient.on('error', function(message) {&#10;		error(message)&#10;	});&#10;	self.addInputHandler('cancel', cancel_in.bind(this));&#10;	cancelClient.open();&#10;}&#10;&#10;var pose_in = function () {&#10;	var v = this.get('pose');&#10;&#10;	out = {&#10;			op: 'publish',&#10;			topic: this.getParameter('topicPrefix') + '/goal',&#10;			msg: {&#10;				'header': {&#10;					'seq': seq++,&#10;					'stamp': {&#10;						'secs': 0,&#10;						'nsecs': 0&#10;					},&#10;					'frame_id': 'map_hokuyo'&#10;				},&#10;				'pose': v&#10;			}&#10;	};&#10;&#10;	poseClient.send(out);&#10;}&#10;&#10;var cmdvel_in = function () {&#10;	var c = this.get('cmdvel');&#10;&#10;	out = {&#10;			op: 'publish',&#10;			topic: this.getParameter('topicPrefix') + '/cmd_vel',&#10;			msg: c&#10;	};&#10;&#10;	console.log('Sending over socket: ' + JSON.stringify(out));&#10;	cmdvelClient.send(out);&#10;}&#10;&#10;var cancel_in = function () {&#10;	var c = this.get('cancel');&#10;&#10;	out = {&#10;			op: 'publish',&#10;			topic: this.getParameter('topicPrefix') + '/cancel',&#10;			msg: {}&#10;	};&#10;&#10;	cancelClient.send(out);&#10;}&#10;&#10;exports.wrapup = function() {&#10;	if (stateClient) {&#10;		stateClient.close();&#10;	}&#10;	if (batteryClient) {&#10;		batteryClient.close();&#10;	}&#10;	if (locationClient) {&#10;		locationClient.close();&#10;	}&#10;	if (poseClient) {&#10;		poseClient.send({&#10;			op: 'unadvertise',&#10;			topic: this.getParameter('topicPrefix') + '/goal'&#10;		});&#10;		poseClient.close();&#10;	}&#10;	if (cmdvelClient) {&#10;		// Stop the robot, then unadvertise.&#10;		var zeroVelocity = {&#10;	    	linear: {&#10;	            x: 0,&#10;	            y: 0,&#10;	            z: 0&#10;	    	},&#10;	    	angular: {&#10;	    		x: 0,&#10;	    		y: 0,&#10;	    		z: 0&#10;	    	}&#10;		};&#10;		var out = {&#10;			op: 'publish',&#10;			topic: this.getParameter('topicPrefix') + '/cmd_vel',&#10;			msg: zeroVelocity&#10;		};&#10;		cmdvelClient.send(out);&#10;&#10;		cmdvelClient.send({&#10;			op: 'unadvertise',&#10;			topic: this.getParameter('topicPrefix') + '/cmd_vel'&#10;		});&#10;		cmdvelClient.close();&#10;	}&#10;	if (cancelClient) {&#10;		cancelClient.send({&#10;			op: 'unadvertise',&#10;			topic: this.getParameter('topicPrefix') + '/cancel'&#10;		});&#10;		cancelClient.close();&#10;	}&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/robotics/Scarab.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="server" class="ptolemy.data.expr.Parameter" value="${ScarabIP}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="topicPrefix" class="ptolemy.data.expr.Parameter" value="/scarab/lucy">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{815.0, 120.0}">
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="ScarabPort">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor exposes a subset of commands and sensor data&#10; for a type of robot called a &amp;quot;Scarab&amp;quot; created by Prof. Vijay Kumar's&#10; group at the University of Pennsylvannia (see [1]).&#10; This accessor communicates with the robot through a websocket connection&#10; to ROS, the Robotic Operating System, using a websocket interface&#10; for ROS called ROSBridge.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires very specific hardware. In the usual configuration,&#10; the ROS core and ROS bridge are executed on a SwarmBox, and robot itself&#10; operates as a ROS client.  The ROS bridge provides a websocket that can&#10; be used to publish and subscribe to ROS events.&lt;/p&gt;&#10;&lt;p&gt; Following are instructions for running this accessor in the DOP Center&#10; setup at Berkeley:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Get your laptop on the SwarmMaster network, hosted by a SwarmBox.&lt;/li&gt;&#10;&lt;li&gt;Connect to the Swarmbox using ssh.  E.g.:&#10;   ssh -l sbuser 192.168.0.111&#10;You will need a password.&lt;/li&gt;&#10;&lt;li&gt;Start screen on the swarmbox:&#10;   screen&lt;/li&gt;&#10;&lt;li&gt;Run the ROS core:&#10;   roscore&lt;/li&gt;&#10;&lt;li&gt;Create a new &amp;quot;window&amp;quot; in screen:&#10;   Ctrl-A C&lt;/li&gt;&#10;&lt;li&gt;Run the ROS bridge:&#10;   roslaunch rosbridge_server rosbridge_websocket.launch&lt;/li&gt;&#10;&lt;li&gt;Detach from screen:&#10;   Ctrl-A D&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt; ROSBridge on Swarmbox will be running at IP 192.168.0.111, port 9090.&lt;/p&gt;&#10;&lt;p&gt; You can now log off from the swarmbox.  To stop the ROS core and bridge&#10; on the SwarmBox later, you can:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Connect to the Swarmbox using ssh, as above.&lt;/li&gt;&#10;&lt;li&gt;Resume screen on the swarmbox:&#10;   screen -r&lt;/li&gt;&#10;&lt;li&gt;Stop the program:&#10;   Ctrl-C&lt;/li&gt;&#10;&lt;li&gt;End the &amp;quot;window&amp;quot;:&#10;   Ctrl-D&lt;/li&gt;&#10;&lt;li&gt;Repeat for all screen windows.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt; Next, set up the robot. The DOP center robot is Lucy, and the ROS prefix&#10; for pub/sub is &amp;quot;/scarab/lucy&amp;quot;.&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Power on the robot (all switches and one push button).&lt;/li&gt;&#10;&lt;li&gt;Find the robot's IP address. You can use the Discovery swarmlet or&#10;command-line tools. The DOP center robot Lucy has mac address&#10;&amp;quot;4:f0:21:3:6:9&amp;quot;.&lt;/li&gt;&#10;&lt;li&gt;Connect to the robot using ssh: e.g., assuming the IP address is 192.168.0.105,&#10;   ssh 192.168.0.105 -l terraswarm&lt;/li&gt;&#10;&lt;li&gt;Enter the password.&lt;/li&gt;&#10;&lt;li&gt;Start screen:&#10;   screen&lt;/li&gt;&#10;&lt;li&gt;Tell the robot it's IP address:&#10;   export ROS_IP=192.168.0.105&lt;/li&gt;&#10;&lt;li&gt;Launch the ROS client:&#10;   roslaunch scarab dop.launch robot:=lucy map_file:=dop.yaml&lt;/li&gt;&#10;&lt;li&gt;Detach from screen and log off (if you like):&#10;  Ctrl-A D&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;h2&gt; References&lt;/h2&gt;&lt;ol&gt;&#10;&lt;li&gt;Nathan Michael, Michael M. Zavlanos, Vijay Kumar, and George J. Pappas,&#10;Distributed Multi-Robot Task Assignment and Formation Control,&#10;IEEE International Conference on Robotics and Automation (ICRA),&#10;Pasadena, CA, USA, May 19-23, 2008.&#10;DOI: 10.1109/ROBOT.2008.4543197&lt;/li&gt;&#10;&lt;/ol&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Brad Campbell, Pat Pannuto. Contributor: Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Scarab.xml 74585 2016-03-05 00:05:16Z cxh $$">
            </property>
            <property name="server (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The IP address of the ROS bridge, e.g. '192.168.0.111'.">
            </property>
            <property name="topicPrefix (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The identifier for the robot, e.g. '/scarab/lucy'.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port used by the ROS bridge web socket, e.g. 9090.">
            </property>
            <property name="pose (port)" class="ptolemy.kernel.util.StringAttribute" value="Send the robot to a location with a given orientation,&#10;  where orientation is a quaternion.">
            </property>
            <property name="undefined (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined">
            </property>
            <property name="cancel (port)" class="ptolemy.kernel.util.StringAttribute" value="Upon receiving any message, cancel the robot's current&#10;  navigation goal. This will cause the robot to stop.">
            </property>
            <property name="battery (port)" class="ptolemy.kernel.util.StringAttribute" value="The percentage of battery remaining.">
            </property>
            <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="The current state of the robot's navigation algorithm. It can&#10;  be one of 'idle', 'navigating', or 'stuck'. If the robot is 'idle' it&#10;  is currently not trying to navigate to any pose. In 'navigating' state,&#10;  the robot is actively trying to reach a desired pose goal. If the robot&#10;  is unable to find a path to the goal (beacuse there were obsticals in the&#10;  way), it will enter the 'stuck' state.">
            </property>
            <property name="location (port)" class="ptolemy.kernel.util.StringAttribute" value="The &quot;pose&quot; type of where the robot currently is. See the&#10;  input &quot;pose&quot; for a description of the format.">
            </property>
            <property name="cmdvel (port)" class="ptolemy.kernel.util.StringAttribute" value="Low-level control for the wheel motors. &#10;  To drive the robot straight forward and backward, set the linear.x property&#10;  to a value between -1.0 (backwards) and 1.0 (forwards). To turn the robot,&#10;  set the angular.z property to a value between -1.0 and 1.0. Both can be&#10;  to steer the robot while it drives forward or backward. The other properties&#10;  are ignored. Note that this interface is not recommended for normal&#10;  operation. In the general case, only `pose` should be used to direct the&#10;  robot.">
            </property>
        </property>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="cmdvel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="cancel" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="battery" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="location" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('turn');&#10;	this.input('area');&#10;	this.output('velocity');&#10;}&#10;&#10;exports.fire = function() {&#10;	var turn = this.get('turn');&#10;	if (turn &amp;&amp; turn[0]) {&#10;		var speed = this.get('area');&#10;		var turn = 0.2 * speed * (turn[0] - 320.0) / 320.0;&#10;		var velocity = {&#10;    	linear: {&#10;            x: 0,&#10;            y: 0,&#10;            z: 0&#10;        },&#10;        angular: {&#10;            x: 0,&#10;            y: 0,&#10;            z: turn&#10;        	}&#10;    	};&#10;    	this.send('velocity', velocity);&#10;	}&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{620.0, 120.0}">
        </property>
        <port name="turn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="velocity" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="area" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="DiscreteClock2" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="0.1">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{true}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{85.0, 120.0}">
        </property>
    </entity>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images.&#10; * &#10; *  @accessor cameras/Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to true.&#10; *  @parameter {string} camera The name of the camera to use.&#10; *   A list of available cameras is presented as options.&#10; *   This is a string that defaults to &quot;default camera&quot;,&#10; *   which uses the system default, if there is one.&#10; *  @parameter {{width: number, height: number}} viewSize The view size&#10; *   to use for capture, in pixels. A list of available view sizes for&#10; *   the selected camara is presented as options. This is a JSON specification&#10; *   with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.&#10; *  @version $$Id: Scarab.xml 74585 2016-03-05 00:05:16Z cxh $$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, exports, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var cameras = require(&quot;cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.output('image');&#10;    this.parameter('triggered', {&#10;        'type' : 'boolean',&#10;        'value' : true&#10;    });&#10;    // NOTE: The following assumes that setup() is reinvoked whenever a parameter&#10;    // value changes, since the camera will change and so will the available options.&#10;    this.parameter('camera', {&#10;        'type' : 'string',&#10;        'value' : 'default camera',&#10;    });&#10;    this.parameter('viewSize', {&#10;        'type' : 'JSON',&#10;    });&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a cameras module.&#10;    try {&#10;        this.parameter('camera', {&#10;            'options' : cameras.cameras()&#10;        });&#10;        camera = new cameras.Camera(getParameter('camera'));&#10;        this.parameter('viewSize', {&#10;            'value' : camera.getViewSize(),&#10;            'options' : camera.viewSizes()&#10;        });&#10;    } catch(err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function () {&#10;    camera.setViewSize(getParameter('viewSize'));&#10;    camera.open();&#10;    var self = this;&#10;    if (getParameter('triggered')) {&#10;        handle = this.addInputHandler('trigger', function () {&#10;            self.send('image', camera.snapshot());&#10;        });&#10;    } else {&#10;        camera.on('image', function (image) {&#10;            self.send('image', image);&#10;        });&#10;    }&#10;};&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function () {&#10;    camera.removeAllListeners('image');&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;    camera.close();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/cameras/Camera.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for a camera on the local host. This can be a built-in camera or&#10; a USB-connected camera. This accessor has two modes of operation, &amp;quot;triggered&amp;quot;&#10; and &amp;quot;open loop.&amp;quot; In triggered mode, it captures an image whenever a trigger&#10; input is received and produces that image on its output. In open-loop mode,&#10; it captures every image produced by the camera, at the speed of the camera,&#10; and produces on the output a stream of such images.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Scarab.xml 74585 2016-03-05 00:05:16Z cxh $$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input for triggered mode.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of captured images.">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to true.">
            </property>
            <property name="camera (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the camera to use.&#10;  A list of available cameras is presented as options.&#10;  This is a string that defaults to &quot;default camera&quot;,&#10;  which uses the system default, if there is one.">
            </property>
            <property name="viewSize (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The view size&#10;  to use for capture, in pixels. A list of available view sizes for&#10;  the selected camara is presented as options. This is a JSON specification&#10;  with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="camera" class="ptolemy.data.expr.Parameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.Parameter" value="{&quot;width&quot;:640, &quot;height&quot;:480}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{245.0, 120.0}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="MotionDetector" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** A motion detector accessor.&#10; *  This accessor compares each input image against the previous&#10; *  input image. There are three outputs.&#10; *  The one named 'output' is a modified image that graphically illustrates&#10; *  the center of gravity of motion, if motion is detected.&#10; *  If enough of the pixels differ by enough, then the 'cog'&#10; *  output will produce the center of gravity of the pixels that&#10; *  differ by enough.&#10; *  Finally, the 'area' output produces the percentage of area&#10; *  covered by motion in the input image, where 0 means no motion&#10; *  and 100 means full image motion.&#10; *  &#10; *  The options parameter can include the following fields:&#10; *  * _PixelThreshold_: Intensity threshold whereby a pixel is&#10; *    deemed to different (an int in the range of 0 to 255, with default 25).&#10; *  * _AreaThreshold_: The percentage threshold of image&#10; *    that has different pixels for motion to be detected&#10; *    (a double 0-100, with default 0.2).&#10; *  * _ModifyImage_: If true (the default), the modify the&#10; *    provided image with a visual indication of the location&#10; *    and amount of motion.&#10; *&#10; *  The implementation for the Ptolemy II host is taken from&#10; *  the webcam-capture package by Bartosz Firyn (SarXos), available from&#10; *  [https://github.com/sarxos/webcam-capture](https://github.com/sarxos/webcam-capture).&#10; *  The webcam-capture package is licensed under the MIT License.&#10; * &#10; *  @accessor image/MotionDetector&#10; *  @input input A stream of images.&#10; *  @input {{&quot;PixelThreshold&quot;: number, &quot;AreaThreshold&quot;: number}} options The options controlling the filter.&#10; *  @output {array&lt;{'horizontal': 'number', 'vertical': 'number'}&gt;} cog The horizontal and vertical position of the center of gravity of motion, in pixels.&#10; *  @output {Object} output The filtered image.&#10; *  @output {number} area The percentage of area covered by motion.&#10; *  @author Edward A. Lee&#10; *  @version $$Id: Scarab.xml 74585 2016-03-05 00:05:16Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, getParameter, input, output, removeInputHandler, require, send  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var motionDetector = require('motionDetector');&#10;&#10;exports.setup = function() {&#10;    this.input('input');&#10;    this.output('output');&#10;    this.output('cog');&#10;    this.output('area', {'type':'number'});&#10;    this.input('options', {'value':'{&quot;PixelThreshold&quot;: 25, &quot;AreaThreshold&quot;: 0.2}', 'type':'JSON'});&#10;};&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('input', function() {&#10;        var options = this.get('options');&#10;        var image = this.get('input');&#10;        var result = motionDetector.filter(image, options);&#10;        this.send('output', result);&#10;        var cog = motionDetector.cog();&#10;        if (cog) {&#10;            this.send('cog', cog);&#10;        }&#10;        this.send('area', motionDetector.area());&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/image/MotionDetector.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;A motion detector accessor.&#10; This accessor compares each input image against the previous&#10; input image. There are three outputs.&#10; The one named 'output' is a modified image that graphically illustrates&#10; the center of gravity of motion, if motion is detected.&#10; If enough of the pixels differ by enough, then the 'cog'&#10; output will produce the center of gravity of the pixels that&#10; differ by enough.&#10; Finally, the 'area' output produces the percentage of area&#10; covered by motion in the input image, where 0 means no motion&#10; and 100 means full image motion.&lt;/p&gt;&#10;&lt;p&gt; The options parameter can include the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;PixelThreshold&lt;/em&gt;: Intensity threshold whereby a pixel is&#10;deemed to different (an int in the range of 0 to 255, with default 25).&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;AreaThreshold&lt;/em&gt;: The percentage threshold of image&#10;that has different pixels for motion to be detected&#10;(a double 0-100, with default 0.2).&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;ModifyImage&lt;/em&gt;: If true (the default), the modify the&#10;provided image with a visual indication of the location&#10;and amount of motion.&lt;/p&gt;&#10;&lt;p&gt;The implementation for the Ptolemy II host is taken from&#10;the webcam-capture package by Bartosz Firyn (SarXos), available from&#10;&lt;a href=&quot;https://github.com/sarxos/webcam-capture&quot;&gt;https://github.com/sarxos/webcam-capture&lt;/a&gt;.&#10;The webcam-capture package is licensed under the MIT License.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Scarab.xml 74585 2016-03-05 00:05:16Z cxh $$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of images.">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The options controlling the filter.">
            </property>
            <property name="cog (port)" class="ptolemy.kernel.util.StringAttribute" value="The horizontal and vertical position of the center of gravity of motion, in pixels.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The filtered image.">
            </property>
            <property name="area (port)" class="ptolemy.kernel.util.StringAttribute" value="The percentage of area covered by motion.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;PixelThreshold&quot;: 25, &quot;AreaThreshold&quot;: 0.2, &quot;ModifyImage&quot;:true}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{435.0, 110.0}">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="cog" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="area" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={20, 23, 640, 524}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[640, 480]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{400.0, 220.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={931, 233, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="Center of Gravity">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{595, 60}">
        </property>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={926, 445, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="Robot Location">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[905.0, 160.0]">
        </property>
    </entity>
    <entity name="Display3" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={927, 23, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="Velocity Command">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[765.0, 235.0]">
        </property>
    </entity>
    <entity name="Display4" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={923, 659, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="title" class="ptolemy.data.expr.StringParameter" value="Amount of Motion">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[610.0, 215.0]">
        </property>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{725.0, 120.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;.TimedDisplay.input&quot;,x=775.0,y=240.0}, tail={id=&quot;relation3.vertex1&quot;,x=725.0,y=120.0}, points={725.0,240.0} },{ head={id=&quot;JavaScript.velocity&quot;,x=620.0,y=120.0}, tail={id=&quot;relation3.vertex1&quot;,x=725.0,y=120.0}, points={} },{ head={id=&quot;Scarab.cmdvel&quot;,x=815.0,y=120.0}, tail={id=&quot;relation3.vertex1&quot;,x=725.0,y=120.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Camera.trigger&quot;,x=245.0,y=120.0}, tail={id=&quot;DiscreteClock2.output&quot;,x=85.0,y=120.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{340.0, 120.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;relation5.vertex1&quot;,x=340.0,y=120.0}, tail={id=&quot;ImageDisplay.input&quot;,x=400.0,y=220.0}, points={340.0,220.0} },{ head={id=&quot;Camera.image&quot;,x=245.0,y=120.0}, tail={id=&quot;relation5.vertex1&quot;,x=340.0,y=120.0}, points={} },{ head={id=&quot;MotionDetector.input&quot;,x=435.0,y=110.0}, tail={id=&quot;relation5.vertex1&quot;,x=340.0,y=120.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{555.0, 215.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;relation6.vertex1&quot;,x=555.0,y=215.0}, tail={id=&quot;JavaScript.area&quot;,x=620.0,y=120.0}, points={555.0,130.0} },{ head={id=&quot;.TimedDisplay2.input&quot;,x=605.0,y=215.0}, tail={id=&quot;relation6.vertex1&quot;,x=555.0,y=215.0}, points={} },{ head={id=&quot;MotionDetector.area&quot;,x=435.0,y=110.0}, tail={id=&quot;relation6.vertex1&quot;,x=555.0,y=215.0}, points={520.0,120.0,520.0,215.0} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[530.0, 110.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Scarab.cmdvel" relation="relation3"/>
    <link port="Scarab.location" relation="relation"/>
    <link port="JavaScript.turn" relation="relation4"/>
    <link port="JavaScript.velocity" relation="relation3"/>
    <link port="JavaScript.area" relation="relation6"/>
    <link port="DiscreteClock2.output" relation="relation2"/>
    <link port="Camera.trigger" relation="relation2"/>
    <link port="Camera.image" relation="relation5"/>
    <link port="MotionDetector.input" relation="relation5"/>
    <link port="MotionDetector.cog" relation="relation4"/>
    <link port="MotionDetector.area" relation="relation6"/>
    <link port="ImageDisplay.input" relation="relation5"/>
    <link port="Display.input" relation="relation4"/>
    <link port="Display2.input" relation="relation"/>
    <link port="Display3.input" relation="relation3"/>
    <link port="Display4.input" relation="relation6"/>
</entity>
