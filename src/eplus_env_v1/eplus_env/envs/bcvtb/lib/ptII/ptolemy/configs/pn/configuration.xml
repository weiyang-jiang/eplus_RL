<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="configuration" class="ptolemy.actor.gui.Configuration">

  <!-- Specify the about file to open. -->
  <property name="_about"
            class="ptolemy.data.expr.FileParameter"
            value="$CLASSPATH/ptolemy/configs/pn/intro.htm"/>

  <!-- Specify the help file to open. -->
  <property name="_help"
            class="ptolemy.data.expr.FileParameter"
            value="$CLASSPATH/ptolemy/configs/doc/docs.htm"/>

  <property name="_classesToRemove" 
            class="ptolemy.data.expr.Parameter"
            value="{&quot;ptolemy.codegen.kernel.StaticSchedulingCodeGenerator&quot;}">
	    <doc>An array of Strings, where each element names a class to be removed by the MoMLFilter.</doc>
     </property>


  <!-- The directory of open models, each represented by an effigy. -->
  <!-- Note that this begins empty. -->
  <entity name="directory" class="ptolemy.actor.gui.ModelDirectory">
  </entity>

  <!-- The state and transition refinements. Use SDF director version. -->
  <input source="ptolemy/configs/sdfRefinements.xml"/>

  <!-- The list of effigy factories, which defines what goes in  -->
  <!-- the New menu, and also what sorts of files can be opened. -->
  <!-- These are searched in the order listed here, until one of -->
  <!-- the effigies agrees to open the file. -->
  <!-- Any of these effigies that return true to canCreateBlankEffigy -->
  <!-- will appear in the New menu.  If there is a contained entity   -->
  <!-- named "blank", then the effigy will initially refer to a clone -->
  <!-- of that blank entity. -->
  <entity name="effigyFactory" class="ptolemy.actor.gui.EffigyFactory">
    <input source="ptolemy/configs/pn/pnEffigies.xml"/>
    <input source="ptolemy/configs/extendedEffigyFactories.xml"/>
  </entity>

  <!-- The list of tableau factories, which defines the visual   -->
  <!-- editors that are available.  After an effigy is created   -->
  <!-- for a model, these factories are tried in order until one -->
  <!-- is willing to open the model. Each editor contains a list -->
  <!-- of other editors that appear in the View menu.            -->
  <property name="tableauFactory" class="ptolemy.actor.gui.TableauFactory">
    <input source="ptolemy/configs/modalTableauFactory.xml"/>
    <input source="ptolemy/configs/graphTableauFactory.xml"/>
    <input source="ptolemy/configs/extendedTableauFactories.xml"/>
  </property>

  <!-- Main default library is normally the following. Override below. -->
  <!-- input source="ptolemy/configs/basicLibrary.xml"-->

  <!-- Main actor library -->
  <entity name="actor library" class="ptolemy.kernel.CompositeEntity">

    <!-- Marker so that tree view expands the library. -->
    <property name="_libraryMarker"
              class="ptolemy.kernel.util.SingletonAttribute"/>

    <input source="ptolemy/configs/utilitiesLibrary.xml"/>

    <!-- Custom actor library. -->
    <entity name="Actors" class="ptolemy.moml.EntityLibrary">
      <configure>
        <?moml
          <group>
<!-- Libraries are mostly customized to make them spartan. -->
<input source="ptolemy/configs/pn/sources.xml"/>
<input source="ptolemy/configs/pn/sinks.xml"/>
  <input source="ptolemy/actor/lib/array.xml"/>
  <input source="ptolemy/actor/lib/conversions/conversions.xml"/>
  <input source="ptolemy/actor/lib/flowcontrol.xml"/>
<input source="ptolemy/configs/pn/hoc.xml"/>
<input source="ptolemy/configs/pn/io.xml"/>
  <input source="ptolemy/actor/lib/logic/logic.xml"/>
  <input source="ptolemy/actor/lib/math.xml"/>
  <input source="ptolemy/actor/lib/matrix.xml"/>
  <input source="ptolemy/actor/lib/random.xml"/>
  <input source="ptolemy/actor/lib/realtime.xml"/>
  <input source="ptolemy/actor/lib/signalprocessing.xml"/>
  <input source="ptolemy/actor/lib/string/string.xml"/>

  <input source="ptolemy/domains/pn/lib/pnentities.xml"/>

          </group>
        ?>
      </configure>
    </entity>
  </entity>
</entity>
