<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is completeDemos.htm,
     then run 'make update'
     to update the derived files and check them in to svn. -->
<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <!-- $Id: demosBcvtb.htm 70166 2014-09-24 14:50:41Z cxh $ -->
    <!--
	demosPtiny.htm is derived from this file by including
	anything between the tags vergilDoc and /vergilDoc.
	The vergilDoc tags are used by $PTII/doc/javahtml.awk
	to generate demosPtiny.htm.
      -->
    <link href="../../../doc/default.css" rel="stylesheet" type="text/css">
  </head>

<body>
    <!--bcvtbDocs-->
    <h1> Tour of Ptolemy II </h1>

    <!--
	Note:  demos should go with in the directory of their respective
	domains. Demo xml files should usually be upper case, and have the
	same name as the directory they reside in; so we should
	have sdf/demo/Foo/Foo.xml.
	The reason that the xml files are upcased is so that if
	we do code generation, we get Foo.java instead of foo.java
      -->

    If you are viewing this from within Vergil, the graphical
    editor for Ptolemy II, then
    many of the following links will open models that highlight the
    key features of Ptolemy II. If you are using an ordinary
    web browser, then you will see the XML definition of the models.
    To run the models in Vergil,
    click on the red triangle in the toolbar. The
    diagrams are fully editable, so feel free to explore.
    You can also access the <a href="completeDemosBcvtb.htm">complete list of demos</a>
    <!-- whatNew.htm links to whatsNew4.0.htm, which has many of features
	 not present in ptiny -->
    <!--vergilDocs-->
    . Contents:
    <ul>
      <li> <a href="#domain">Application Domain-Specific Modeling</a>: Application Domain-specific modeling and design.
      </li>

      <li> <a href="#heterogeneous">Heterogeneous Modeling</a>: Mixing models of computation.
      </li>

      <li> <a href="#basic">Basic Modeling Capabilities</a>: Commonly used models of computation.
      </li>

      <li> <a href="#infrastructure">Modeling Infrastructure</a>: Capabilities shared by all uses of Ptolemy II.
      </li>

      <li> <a href="#libraries">Actor Libraries</a>: Useful libraries of actors.
	<!--vergilDocs-->
      </li>

    </ul>



    <h2>
      <a name="domain">Application Domain-Specific Modeling</a>
    </h2>


    Ptolemy II can be used to build sophisticated application domain-specific modeling capabilities
    and frameworks. These frameworks can be packaged as separate executable
    applications (e.g. HyVisual or VisualSense)
    or accessed from within Ptolemy II. Here, we illustrate some such frameworks.
    <ul>



	<!--vergilDocs-->

	<br>


      </li>

      <li>
	<i>Stochastic hybrid systems</i>:
	<a href="../../domains/continuous/demo/Noise/Noise.xml">Noise</a>
	(see also
	<a href="../../domains/continuous/demo/Poisson/IncreasingRatePoisson.xml">IncreasingRatePoisson</a>,
	<a href="../../domains/continuous/demo/Hysteresis/HysteresisWithRandomDelay.xml">HysteresisWithRandomDelay</a>,
	<a href="../../domains/continuous/demo/Brownian/Brownian.xml">Brownian</a>
	).
	<br>


	Stochastic hybrid systems add random behavior to continuous-time models mixed
	with discrete events. The
	<a href="../../domains/continuous/demo/Noise/Noise.xml">Noise</a>
	<!--bcvtbDocs-->
	) models
	show bandlimited Gaussian noise processe.
	<a href="../../domains/continuous/demo/Poisson/IncreasingRatePoisson.xml">IncreasingRatePoisson</a>
	models spontaneous mode transitions governed by a Poisson process.
	The <a href="../../domains/continuous/demo/Hysteresis/HysteresisWithRandomDelay.xml">HysteresisWithRandomDelay</a>
	example uses similar spontaneous mode transitions to model random delay in mode transitions.
	The <a href="../../domains/continuous/demo/Brownian/Brownian.xml">Brownian</a> example
	models a stochastic differential equation describing a random walk process.

	<!--vergilDocs-->

	<br>



      </li>

      <li><i>Signal Processing</i>:
	<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>
	(See also
	<a href="../../domains/sdf/demo/LMSAdaptive/LMSAdaptive.xml">LMSAdaptive</a>,
	<a href="../../domains/sdf/demo/SynthesizedVoice/SynthesizedVoice.xml">SynthesizedVoice</a>,
	<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>, and
	<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>)
	<br>


	Ptolemy II includes an extensive library and models of computation suitable for
	digital signal processing, communication systems design, and image and video processing.
	The <a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>
	example shows spectral estimation of sinusoids in noise.
	It illustrates models the use of synchronous dataflow (SDF) for signal
	processing, and also shows many basic capabilities like
	hierarchical models,
	the Expression actor, and the signal processing actor library.


      </li>

    </ul>


    <h2>
      <a name="heterogeneous">Heterogeneous Models</a>
    </h2>


    A particular capability of Ptolemy II is the ability to mix models of computation.
    These examples illustrate some of these capabilities.
    <ul>


      <!--bcvtbDocs-->
      <li><i>Mixed-Signal Modeling</i>:
	<!--bcvtbDocs-->
	<a href="../../domains/continuous/demo/Switch/Switch.xml">Switching Continuous</a>
	<!--bcvtbDocs-->
      </li>

    </ul>


    <h2>
      <a name="basic">Basic Modeling Capabilities</a>
    </h2>


    Many common models of computation have been implemented in
    Ptolemy II.  This section illustrates some of them.
    <ul>



      <li><i>Synchronous Dataflow</i>:
	<a href="../../domains/sdf/demo/Spectrum/Spectrum.xml">Spectrum</a> (See also
	<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>,
	<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>, and
	<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>)
	<br>

	This example shows simple spectral estimation of the product
	of two sinusoids in noise.  It illustrates models the use of synchronous dataflow (SDF) for signal
	processing, and also shows many basic capabilities like
	hierarchical models,
	the Expression actor, and the signal processing actor library.
	In SDF, the firing of actors is statically scheduled, and at the start of execution,
	boundedness and deadlock conditions are checked.


	<br>



      </li>

      <li><i>Continuous-Time Modeling</i>:
	<a href="../../domains/continuous/demo/Lorenz/Lorenz.xml">Lorenz</a> (see also
	<a href="../../domains/continuous/demo/Lorenz/LorenzDifferentialSystem.xml">Lorenz with DifferentialSystem</a>,
	<a href="../../domains/continuous/demo/SquareWave/SquareWave.xml">SquareWave</a>,
	<a href="../../domains/continuous/demo/Sinusoid/Sinusoid.xml">Sinusoid</a>)
	<br>

	This example shows a continuous-time
	nonlinear feedback system that exhibits
	chaotic behavior (this system is called a Lorenz attractor).
	It illustrates the <i>continuous</i> domain,
	which uses an underlying solver for ordinary differential equations
	and cleanly supports mixtures of discrete events and continuous-time
	signals.


	<br>



      </li>
	<!--bcvtbDocs-->
	<!--ptinyKeplerDocs-->
    <!--bcvtbDocs-->

    <h2>
      <a name="infrastructure">Modeling Infrastructure</a>
    </h2>


    Ptolemy II models are built on an underlying framework that provides a rich
    set of generic capabilities that are available in all models.
    This section illustrates that infrastructure.
    <ul>

	<!--bcvtbDocs-->



      </li>

      <li><i>Expression Language</i>:
	<a href="../../domains/continuous/demo/Transmission/Transmission.xml">Transmission</a>.
	<br>


	To simplify creating new components, Ptolemy II contains a functional
	expression language.  The expression language is integrated with the
	type system, allowing static type checking of polymorphic expressions
	with few type annotations.  The expression language also allows new,
	encapsulated functions, called function closures, to be defined and
	passed as data.  This model illustrates how function closures can be
	used to make models much more compact.

	<br>


	<!--vergilDocs-->

      </li>

      <li><i>Interactive Signal Plotter</i>:
	<a href="../../domains/sdf/demo/Sketch/Sketch.xml">Sketch</a>
	(see also <a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>).
	<br>


	This model illustrates the use of plotter to provide input
	as well as rendering output from a model.  Right click and drag
	on the plot to trace out a new signal. The model runs each time you
	do this.

	<br>



      </li>

      <li><i>Matlab Integration</i>:
	<a href="../../matlab/demo/MatlabExpression/MatlabExpression.xml">MatlabExpression</a>
	(see also
	<a href="../../matlab/demo/MatlabContinuous/MatlabContinuous.xml">Matlab in Continuous</a>).

	<br>


	This example uses the Matlab interface created by
	Zoltan Kemenczy and Sean Simmons, of Research in Motion Ltd.,
	to plot a 3-D surface. This works only if Matlab is installed locally.

	<br>



      </li>

      <li>
	<i>Classes, subclasses, and inner classes</i>:
	<a href="ClassesIllustrated.xml">ClassesIllustrated</a> (see also
	<a href="../../domains/sdf/demo/NoisySinewave/NoisySinewave.xml">Noisy sinewaves</a>
	<!--bcvtbDocs-->  
	).
	<br>


	Actor-oriented classes, subclasses, and
	inner classes with inheritance are a special feature of Ptolemy II.
	They provide modularity mechanisms analogous to those of object-oriented
	design, but adapted to actor-oriented design. This capability permits, for
	example, defining a class of models that can have instances and subclasses.
	The instances and subclasses inherit all the features of the class, and
	track any changes that are made to the class.

	<br>



      </li>

      <li><i>Model Animations</i>:
	<!--bcvtbDocs-->
	<a href="../../vergil/kernel/attributes/demo/AnimateVergil/AnimateVergil.xml">AnimateVergil</a>
	<!--vergilDocs-->
	<!--bcvtbDocs-->
	<br>


	Ptolemy II models can, while executing, control their visual rendition
	in Vergil, the visual editor for Ptolemy II.
	In this example, a model alters the position in the Vergil diagram
	of one of its own actors.

	<br>



	<!--vergilDocs-->

      </li>

      <li><i>Statically Checked Units System</i>:
	<a href="../../data/unit/demo/StaticUnits/StaticUnits.xml">StaticUnits</a>
	<!--bcvtbDocs-->
	<br>


	This model illustrates the use of the statically
	checked units system. A unit system
	defines a set of interrelated dimensions and measures. For example, in
	the time dimension, we might have seconds, minutes, hours, days, weeks,
	and fortnights. Ptolemy II includes two experimental units systems,
	one that is statically checked and one that is dynamically checked.

	<br>



      </li>

      <li><i>Network Integration</i>:
	<a href="../../moml/demo/Networked/Networked.xml">Networked</a>.<br>


	This example illustrates that models may be defined in a networked,
	distributed fashion.
	This model contains a component that is defined on the Ptolemy project
	website.  When you open the model, you will be alerted to the fact
	that it requires loading a model definition from a remote source.
	If you agree to proceed, then you will have a model with a remotely
	defined component.  The component itself is at
	<a href="http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml#in_browser" target="_top">http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml</a>.
	You can open that definition by clicking on the hyperlink, or by
	using the "Open URL" command in the File menu.

	<br>



      </li>

      <li><i>Audio</i>:
	<a href="../../actor/lib/javasound/demo/KarplusStrong/KarplusStrong.xml">KarplusStrong</a> (see also <a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>).
	<br>


	Ptolemy II includes actors that interface to the audio system on
	the executing machine, assuming it has one.
	This example shows the Karplus-Strong algorithm, which synthesizes
	a musical sound that closely resembles a plucked string instrument.
	It illustrates the audio capabilities of Ptolemy II.

	<br>



	<!--/ptinyKeplerDocs-->
	<!--bcvtbDocs-->

	<!--vergilDocs-->

	<br>


      </li>

      <li><i>Fixed-Point Arithmetic</i>:
	<a href="../../domains/sdf/demo/FixFIR/FixFIR.xml">FixFIR</a>
	(see also
	<a href="../../domains/sdf/demo/FixPoint/FixPoint.xml">FixPoint</a>)
	<br>


	Ptolemy II data types include a fixed-point data type, where
	a model can explicitly control the binary representation of numbers
	and the mechanisms used to handle overflow and rounding.

      </li>

    </ul>



    <h2>
      <a name="libraries">Actor Libraries</a>
    </h2>


    Ptolemy II includes several actor libraries that provide sophisticated
    functions. A few of those are illustrated by the models here.
    <ul>



      <li><a href="../../domains/sdf/demo/Array/Array.xml">Array</a>:
	Actors that operate on matrices and arrays.

      </li>
      <!--/ptinyKeplerDocs-->
</body>
</html>
